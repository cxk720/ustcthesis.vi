%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: -0.07285 -0.01134 394.01575 65.19685 
%%LanguageLevel: 3
%%Creator: CorelDRAW X6
%%Title: Backup_of_ustc_logo_text_inv.eps
%%CreationDate: Thu Jun 12 20:22:05 2014
%%DocumentProcessColors: Cyan Magenta 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 3 def
%Build: CorelDRAW X6 16.1.0.843 °æ±¾
/EpsFile true def
%%BeginResource: procset wCorel16Dict 16.0 0
/wCorel16Dict 300 dict def wCorel16Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparation/LumSepsDict where
{pop false}{/AldusSepsDict where{pop false}{InRipSeparation{true}{1 0 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not}ifelse
}ifelse}ifelse def/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{
deviceinfo/Colors get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict
/processcolors known{statusdict/processcolors get exec 1 gt}{false}ifelse}{
false}ifelse}ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode
/OnHost ne InRipSeparation AdobeDistiller or and}bind}{false}ifelse def
/DocGrayScaleSpace[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace
[/DeviceCMYK]def/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[
0.9637 1.0000 0.8241]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116
div}bind{500 div}bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[
{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul
}bind{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000
mul}bind{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse
0.8241 mul}bind]>>]def/validate_cie_colorspace_whitepoint{load dup aload pop
/WhitePoint get 1 1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE
where{pop/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint
/DocGrayScaleSpace xd DocGrayScaleSpace aload pop begin pop/DecodeA where{pop
DecodeA type/arraytype eq{DecodeA aload pop/DecodeA exch def}if}if end}if
/DocRgbSpaceCIE where{pop/DocRgbSpaceCIE validate_cie_colorspace_whitepoint
/DocRgbSpace xd}if/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE
validate_cie_colorspace_whitepoint/DocCmykSpace xd}if}bd/set_rendering_intent{
Level3{findcolorrendering{/ColorRendering findresource setcolorrendering}{dup
/DefaultColorRendering eq{pop}{/ColorRendering findresource setcolorrendering}
}ifelse}{pop}ifelse}bd/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5
array astore}def}ifelse/setcustomcolor where SeparationMode/OnHost ne and{pop}
{/tint_cmyk_color{5 -1 roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}
ifelse}bd/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll
pop pop pop 1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch
aload pop SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{
CurrentInkName_5 eq{4 index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd
}ifelse/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}
repeat 3 copy min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd
/safe_setcolorspace{dup currentcolorspace eq{pop}{setcolorspace}ifelse}bd
/safe_setoverprint{dup type/booleantype eq{dup currentoverprint ne{
setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse}bd/is_cmyk_channel_name{
/channel_name xd channel_name/Cyan eq channel_name/Magenta eq or channel_name
/Yellow eq or channel_name/Black eq or{true}{false}ifelse}bd
/is_rgb_channel_name{/channel_name xd channel_name/Red eq channel_name/Green eq
or channel_name/Blue eq or{true}{false}ifelse}bd/is_spot_channel_name{
/channel_name xd channel_name is_cmyk_channel_name channel_name
is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse}bd
/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSpace safe_setcolorspace color aload pop setcolor}bd/separate_set_color{
SeparationMode/OnHost eq{separate_color{/set_color dexec true}{pop
currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1 SetGry true}
ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{currentdict false
}bd/convert_to_cmyk{currentdict}bd currentdict end def/GrayscaleColorSpec
ColorSpec 9 dict copy begin/names{/Black}def/num 1 def/ColorModel/Grayscale def
/ColorSpace DocGrayScaleSpace def/separate_color{currentdict false
SeparationMode/OnHost eq{SeparationPlateName/Black eq{SeparateInColor{pop
convert_to_cmyk true}{pop true}ifelse}if}if}bd/convert_to_cmyk{0 0 0 color
aload pop 1 exch sub create_cmyk_color}bd currentdict end def
/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin/color exch 1 array
astore def/ColorSpace DocGrayScaleSpace def currentdict end}bd/RgbColorSpec
ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3 def/ColorModel/Rgb
def/ColorSpace DocRgbSpace def/separate_color{convert_to_cmyk/separate_color
dexec}bd/convert_to_cmyk{color aload pop convert_rgb_to_cmyk create_cmyk_color
}bd currentdict end def/create_rgb_color{RgbColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocRgbSpace def currentdict end}bd
/CmykColorSpec ColorSpec 9 dict copy begin/names{/Cyan/Magenta/Yellow/Black}
def/num 4 def/ColorModel/Cmyk def/ColorSpace DocCmykSpace def/separate_color{
currentdict false SeparationPlateIndex 0 ge SeparationPlateIndex 3 le and{
color SeparationPlateIndex get dup 0 gt{3 1 roll pop pop SeparateInColor{0 0 0
4 SeparationPlateIndex roll create_cmyk_color true}{1 exch sub
create_grayscale_color true}ifelse}{pop}ifelse}if}bd/convert_to_cmyk{
currentdict}bd currentdict end def/create_cmyk_color{CmykColorSpec 9 dict copy
begin 4 array astore/color exch def/ColorSpace DocCmykSpace def currentdict end
}bd/SpotColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel/Spot def
/separate_color{currentdict false SeparationPlateIndex 4 eq{names aload pop
SeparationPlateName eq{color aload pop dup 0 gt{3 1 roll pop pop
SeparateInColor{pop convert_to_cmyk true}{1 exch sub create_grayscale_color
true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{/alternativeSpace ColorSpace 2
get def/tintTransformProc ColorSpace 3 get def alternativeSpace DocCmykSpace eq
{color aload pop tintTransformProc create_cmyk_color}{alternativeSpace
DocRgbSpace eq{color aload pop tintTransformProc create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{0 0 0 color aload
pop 1 sub create_cmyk_color}if}ifelse}ifelse}bd currentdict end def
/create_spot_colorspace{load/alternativeSpace xd/alternativeColor xd/name xd[
/Separation name alternativeSpace[alternativeColor alternativeSpace
/spot_tint_transform_proc cvx]cvx]}bd/create_spot_color{SpotColorSpec 9 dict
copy begin dup type/arraytype ne{create_spot_colorspace}if/ColorSpace xd/color
exch 1 array astore def ColorSpace 1 get 1 array astore/names xd currentdict
end}bd/DevicenColorSpec SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def
/set_color{Level3{ColorSpace safe_setcolorspace color aload pop setcolor}{
ColorSpace 2 get setcolorspace color aload pop ColorSpace 3 get exec setcolor}
ifelse}bd/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup
names exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex
0 ge{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/separate_color{SeparateInColor{convert_to_cmyk true}{color
aload pop 1 exch sub create_grayscale_color true}ifelse}bd/convert_to_cmyk{
color aload pop dup dup dup create_cmyk_color}bd currentdict end def
/create_registration_color{RegistrationColorSpec 9 dict copy begin 1 array
astore/color xd currentdict end}bd/LabColorSpec ColorSpec 9 dict copy begin
/names{/L/a/b}def/num 3 def/ColorModel/Lab def/ColorSpace DocLabSpace def
/separate_color{convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{0 0 0 0
create_cmyk_color}bd currentdict end def/create_lab_color{LabColorSpec 9 dict
copy begin 3 array astore/color exch def/ColorSpace DocLabSpace def currentdict
end}bd/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd
}bd/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{
@np/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/setcmykcolor{create_cmyk_color/separate_set_color dexec
/$ffpnt xd}bd/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}bd
/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel16Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
-0.07285 -0.01134 394.01575 65.19685 @E
/$fm 0 def
 0 O 0 @g
1.0000 0.8000 0.0000 0.0000  create_cmyk_color set_solid_fill
-0.07285 65.19685 m
394.01575 65.19685 L
394.01575 -0.01134 L
-0.07285 -0.01134 L
-0.07285 65.19685 L
@c
F

@rax %Note: Object
8.43506 8.22189 385.50728 56.96306 @E
/$fm 1 def
 0 O 0 @g
0.0000 0.0000 0.0000 0.0000  create_cmyk_color set_solid_fill
360.87506 49.29307 m
360.90057 49.94759 360.92693 50.60211 360.95301 51.25606 C
362.93584 51.80400 361.67868 56.22860 363.68929 56.96306 C
364.35600 56.96306 L
364.56633 56.17814 365.18145 55.15228 365.42948 54.31890 C
365.42948 53.74318 365.42948 53.16718 365.42948 52.59146 C
366.13502 49.36479 365.65909 47.97326 365.03660 45.20948 C
361.96866 44.82992 362.24589 47.45254 360.87506 49.29307 C
@c
368.96315 26.59805 m
368.94019 30.30690 371.93443 29.54721 374.61770 30.36784 C
375.82157 30.73578 377.96287 31.76617 378.77981 32.64491 C
379.20331 33.10044 379.36176 33.84907 379.80000 34.29383 C
379.64494 34.53676 379.54261 35.02488 379.40769 35.31487 C
378.82517 35.62441 378.01786 36.23868 377.52293 36.41414 C
376.73631 36.69364 375.89074 36.47820 375.24529 36.80702 C
371.43071 36.44731 365.68375 33.35131 364.40872 30.76016 C
364.38265 30.07956 364.35657 29.39924 364.33020 28.71836 C
364.96431 28.34164 365.44139 27.70866 365.82236 27.06917 C
365.71351 25.38057 365.76283 23.39830 363.85880 23.29965 C
363.27770 23.68205 362.98431 23.90627 362.44545 24.39921 C
361.80794 23.89266 361.54205 23.79742 360.56069 24.00661 C
360.04224 24.99902 357.62655 30.68220 357.89074 31.54507 C
358.18072 32.38469 359.62072 32.64180 360.24661 32.95899 C
361.76202 33.72746 362.86866 35.52860 364.17288 36.57090 C
364.85943 37.11940 365.72825 36.94054 366.60728 37.35666 C
368.67317 38.33376 370.16787 40.65874 371.86923 42.38249 C
373.72507 44.26299 376.45965 44.56346 377.99405 46.70135 C
377.94161 46.80624 377.88917 46.91083 377.83757 47.01572 C
377.81121 47.01572 377.78513 47.01572 377.75906 47.01572 C
376.59713 45.95528 373.13518 43.56113 370.84819 45.20948 C
370.09559 45.75175 370.10466 47.14809 369.59187 47.95824 C
369.27071 48.46450 368.49742 48.66038 368.41351 49.37159 C
368.54476 49.73811 368.67572 50.10463 368.80611 50.47087 C
370.33909 50.48504 373.25735 48.42283 374.14658 47.56535 C
376.29751 48.24822 378.49663 48.89820 380.58605 50.07827 C
381.38513 50.52983 382.61509 49.57880 382.94135 49.84299 C
383.97798 49.08813 385.55546 45.03855 383.49099 44.18844 C
382.53090 43.90101 380.98743 43.97726 379.95732 43.71704 C
377.46624 43.08860 374.36060 41.51112 372.73294 39.86957 C
372.75902 39.81713 372.78539 39.76498 372.81146 39.71254 C
372.86334 39.71254 372.91578 39.71254 372.96822 39.71254 C
373.89713 39.44438 375.59310 40.06318 376.81654 39.47669 C
379.71496 38.08630 383.40113 36.91899 383.33424 32.33055 C
382.76589 32.11313 382.43820 31.56066 381.84208 31.30951 C
380.33348 30.67455 378.79767 30.77178 377.60173 29.97468 C
377.60173 29.81764 377.60173 29.66088 377.60173 29.50356 C
377.91723 29.08630 378.23839 28.65458 378.22989 27.61909 C
377.75367 27.29764 377.86365 26.66778 377.52293 26.20545 C
376.35846 24.62513 374.71351 23.34869 374.22482 21.49342 C
374.51282 21.17962 374.80054 20.86526 375.08910 20.55118 C
377.24343 19.73849 386.72816 24.87628 385.37575 19.21635 C
385.18526 18.41754 384.66624 18.05357 384.43351 17.41011 C
383.28435 17.39480 382.77496 17.61279 381.99940 17.80243 C
380.65521 18.13209 376.38624 16.60252 375.63817 16.07499 C
375.86494 14.62337 376.02992 13.25707 376.03134 11.36324 C
375.65093 11.16794 375.57241 10.71014 375.24529 10.49953 C
374.53833 10.04343 373.75767 10.05335 372.96822 9.71433 C
372.50334 9.51477 371.59682 8.84523 370.92671 8.61477 C
366.40233 7.05997 361.82211 11.18438 360.79654 14.19052 C
360.82261 14.21688 360.84898 14.24296 360.87506 14.26876 C
362.15631 14.25515 364.00025 12.79247 365.27244 12.14872 C
365.87480 12.12236 366.47631 12.09628 367.07868 12.06992 C
370.46466 12.06992 372.58526 13.44161 374.06778 15.52535 C
374.04170 15.78728 374.01562 16.04920 373.98926 16.31055 C
373.80586 16.41515 373.62274 16.52003 373.43934 16.62491 C
371.57953 17.40813 368.37666 15.60501 366.84340 15.36831 C
365.22142 15.11773 361.51115 15.19257 360.24661 15.99676 C
359.92431 16.20142 359.67657 16.75417 359.46142 16.86047 C
359.46142 17.20063 359.46142 17.54135 359.46142 17.88123 C
359.80186 18.14315 360.14173 18.40479 360.48189 18.66671 C
362.73288 18.66671 364.98472 18.66671 367.23572 18.66671 C
367.90781 18.86513 368.74035 19.55083 369.35603 19.76598 C
370.32661 20.10444 371.32639 19.99276 372.18302 20.15858 C
372.31427 20.31562 372.44466 20.47294 372.57562 20.62970 C
372.52148 21.24595 371.95483 21.99090 372.26183 22.90706 C
372.81685 24.56532 373.50028 25.67027 374.30306 27.30472 C
374.11398 27.55616 373.91499 27.71830 373.59666 27.61909 C
372.20230 27.51846 371.07751 26.60315 368.96315 26.59805 C
@c
326.47918 25.10561 m
326.44800 25.57587 326.20365 25.38425 326.47918 25.57701 C
326.76973 27.25285 329.66022 28.20954 331.42620 27.06917 C
333.77216 25.55461 337.96517 22.57937 337.55102 18.50939 C
335.81027 17.68706 335.77483 15.88649 333.07540 15.99676 C
332.85997 16.57049 332.02998 17.12721 331.66176 17.64567 C
331.50501 18.29991 331.34797 18.95471 331.19065 19.60866 C
330.49247 21.28961 328.05156 24.97068 326.47918 25.10561 C
@c
312.42246 35.39339 m
312.50041 35.60287 312.57921 35.81206 312.65745 36.02154 C
313.87068 35.89654 315.17320 35.59153 316.34872 35.23606 C
317.76378 34.80860 322.47893 36.60661 322.78819 37.19962 C
323.57906 38.57017 323.38120 46.68406 322.78819 47.95824 C
322.24762 49.11874 321.38617 49.48724 321.37483 51.33458 C
322.53704 51.81335 322.50529 51.98854 324.43710 51.96274 C
326.56819 50.46888 326.63650 47.12967 326.63594 43.56057 C
326.63594 42.34507 326.28047 38.60787 326.47918 38.45565 C
327.46706 38.16510 331.02113 39.59320 331.66176 40.02661 C
331.77288 41.22425 331.31962 41.74554 330.48425 42.38249 C
330.51033 42.77509 330.53669 43.16769 330.56249 43.56057 C
330.71924 43.53420 330.87657 43.50813 331.03389 43.48176 C
331.71364 43.11524 332.28255 42.31644 332.99688 42.06841 C
334.92302 41.39915 336.87354 41.81953 338.72967 41.28293 C
338.84447 40.94986 338.91194 41.03546 339.04346 40.73329 C
339.04346 40.26189 339.04346 39.79077 339.04346 39.31937 C
338.60636 39.12350 338.49666 38.53672 338.10123 38.29890 C
337.56973 37.97943 336.02854 38.13534 335.35276 37.90630 C
333.51902 37.28466 326.50668 34.47893 325.22230 33.11603 C
324.43710 32.28180 324.85776 30.74995 324.43710 29.50356 C
323.28113 26.08016 320.90769 18.75912 316.19140 20.62970 C
315.85153 20.65606 315.51109 20.68214 315.17093 20.70850 C
314.50535 21.09628 313.94778 21.82620 313.28617 22.20038 C
313.31254 22.51446 313.33861 22.82882 313.36498 23.14290 C
313.90554 23.37222 314.57650 24.33317 314.93509 24.47773 C
316.14491 24.96472 317.33717 24.77735 318.31172 25.26293 C
319.57682 25.89307 322.14699 30.29981 321.68863 31.70239 C
319.71628 32.03887 317.27509 31.68709 315.09241 31.70239 C
314.52463 32.53153 313.54753 33.09279 312.97153 33.90151 C
312.65745 34.34230 312.68636 34.92369 312.42246 35.39339 C
@c
285.87969 51.64894 m
285.87969 52.01518 285.87969 52.38198 285.87969 52.74822 C
286.01008 52.85282 286.14076 52.95770 286.27200 53.06258 C
289.34334 52.72441 295.23345 52.31991 295.14557 48.19380 C
293.89351 46.19480 293.37846 44.64964 290.19855 45.68060 C
289.95477 46.20161 289.65827 46.92699 289.41279 47.40803 C
288.96803 47.51291 288.52299 47.61751 288.07795 47.72239 C
288.12019 49.12186 286.64561 51.33288 285.87969 51.64894 C
@c
272.21528 25.49877 m
272.90438 25.20567 273.82535 25.20964 274.41411 25.57701 C
274.96545 25.92142 275.50148 25.61187 275.90598 26.04813 C
276.78954 27.00227 275.92271 29.78277 274.96375 30.21052 C
274.72819 30.21052 274.49235 30.21052 274.25679 30.21052 C
274.25679 30.21052 272.29380 25.65581 272.29380 25.65581 C
272.26772 25.60337 272.24135 25.55093 272.21528 25.49877 C
@c
263.57698 17.56715 m
263.63169 18.83282 264.26948 19.97660 264.51921 21.17962 C
264.68249 21.96567 264.24794 23.05956 264.28394 23.77106 C
266.21858 24.10980 268.84602 28.61178 270.48784 29.97468 C
271.15172 30.52630 272.25921 31.36224 273.07899 31.62387 C
273.41915 31.57143 273.75959 31.51899 274.10003 31.46683 C
275.33452 31.21143 276.41764 31.63635 277.08406 31.93824 C
277.10929 32.40935 277.12006 32.94737 276.92731 33.19427 C
276.85871 33.35102 276.46894 33.99392 276.37710 33.82271 C
275.71748 33.79550 275.20243 33.14296 274.64967 32.80195 C
274.25679 32.80195 273.86447 32.80195 273.47159 32.80195 C
271.18460 32.80195 269.66665 34.99682 270.17348 37.43518 C
272.23455 36.80646 275.68942 36.82261 277.39814 38.06334 C
277.78904 41.07458 278.10425 45.39458 279.20438 47.80120 C
279.61512 48.70035 278.65899 50.97685 279.28290 52.66942 C
279.70129 52.66942 280.12054 52.66942 280.53921 52.66942 C
280.77506 52.32954 281.01061 51.98910 281.24617 51.64894 C
281.45537 51.11717 282.52261 45.35008 282.34545 44.81688 C
282.02683 43.86076 280.88816 40.45408 281.32469 39.55550 C
281.37685 39.45061 281.42929 39.34573 281.48173 39.24142 C
283.09238 39.22611 284.94567 40.25480 285.48652 41.59729 C
285.89131 42.60047 284.99839 42.99392 285.17244 43.56057 C
285.30340 43.56057 285.43408 43.56057 285.56532 43.56057 C
286.45172 43.04948 289.85017 42.57326 291.14107 42.38249 C
291.14107 41.85921 291.14107 41.33537 291.14107 40.81181 C
290.95739 40.70721 290.77427 40.60233 290.59087 40.49745 C
290.51235 40.60233 290.43411 40.70721 290.35531 40.81181 C
288.14258 40.04731 283.17260 37.78668 282.65981 36.10035 C
282.11159 36.12501 281.40633 36.15109 281.08885 35.94302 C
279.48019 34.99115 280.73480 32.58510 280.14690 30.52431 C
279.97172 29.91033 279.68797 29.03981 279.83254 28.24724 C
280.12054 28.22117 280.40882 28.19480 280.69625 28.16872 C
281.75584 30.13994 284.62110 30.96510 286.74340 29.26800 C
288.50372 27.86003 287.14592 26.45887 287.84239 24.39921 C
288.25087 23.19250 289.54148 22.54252 290.04123 20.94406 C
290.06816 20.85817 290.25553 20.51915 290.35531 20.70850 C
291.70403 16.93644 286.33238 16.94806 284.30844 17.09575 C
284.06466 17.56772 283.48044 18.08050 283.28769 18.58819 C
282.45231 20.79184 282.50419 23.74838 280.46098 24.71329 C
277.10759 22.29817 280.96809 17.11984 279.36142 13.01244 C
279.33534 13.01244 279.30898 13.01244 279.28290 13.01244 C
278.89285 13.38803 278.19099 13.42687 277.79102 13.79792 C
276.79209 14.72258 276.06756 16.47638 275.59191 18.19559 C
275.11200 19.93096 276.63024 21.40894 276.14154 22.43594 C
275.94794 22.55443 275.87764 22.65250 275.74923 22.82854 C
274.37074 22.89855 272.21046 22.33106 271.74387 21.17962 C
271.45984 20.47833 271.67698 19.97943 271.35156 19.29487 C
270.77244 18.07710 268.62038 14.68460 267.50353 14.11200 C
266.56129 13.81096 265.51871 14.38243 264.91209 14.89720 C
265.33389 16.21871 264.32192 17.42995 263.57698 17.56715 C
@c
236.56309 40.81181 m
236.77795 40.63635 236.71247 40.62813 237.11244 40.57625 C
238.10769 41.01562 240.59424 41.53181 241.11780 42.46101 C
241.11780 42.80145 241.11780 43.14161 241.11780 43.48176 C
240.60387 44.58161 239.28605 45.58309 238.36932 46.30904 C
238.31688 46.30904 238.26444 46.30904 238.21200 46.30904 C
237.59206 45.13720 236.58917 42.45222 236.56309 40.81181 C
@c
223.76239 23.06438 m
224.02431 22.17458 224.28595 21.28422 224.54787 20.39443 C
225.78293 18.14995 230.03546 16.82759 232.95061 18.50939 C
233.33981 19.71780 229.81663 24.74929 228.78822 25.57701 C
229.78318 25.57701 230.77786 25.57701 231.77254 25.57701 C
232.45512 25.16712 236.68044 23.76454 236.95540 23.92838 C
237.79191 24.61805 237.96794 30.41206 237.26948 30.83839 C
236.96589 31.01868 236.64728 30.98239 236.24872 30.91720 C
235.82891 30.08296 235.06016 28.67896 234.28517 28.01169 C
234.15449 28.01169 234.02353 28.01169 233.89285 28.01169 C
233.25364 28.99616 232.62151 29.91572 232.08661 31.15276 C
231.56844 32.35068 232.35761 34.32784 231.92986 35.31487 C
228.71140 35.74743 228.77773 33.34876 227.45339 31.70239 C
225.57487 29.36665 223.73263 27.10913 223.76239 23.06438 C
@c
208.60639 21.80778 m
208.60639 22.33077 208.60639 22.85461 208.60639 23.37817 C
209.50441 23.85609 210.02882 24.88564 210.80523 25.49849 C
210.54501 26.19184 210.40214 26.95776 210.49087 27.85408 C
211.13575 27.86117 213.28611 27.37984 214.65298 27.85408 C
215.90022 28.28750 221.18173 30.09572 221.72060 30.99572 C
222.34734 32.04170 221.70189 35.05550 222.19200 36.10035 C
222.51458 36.78746 223.99257 38.87121 223.52683 39.79077 C
222.23310 41.41899 217.06413 38.08148 217.08709 42.22545 C
217.30167 42.26825 217.25036 42.27477 217.48025 42.46101 C
218.23824 42.46980 218.99962 42.32013 219.52205 42.06841 C
220.82825 42.63420 224.62951 43.99625 225.41159 45.28800 C
226.59846 47.24759 226.00233 49.61707 227.84598 51.17783 C
229.26699 51.32381 230.43628 51.03043 231.61550 50.47087 C
230.84929 48.00529 228.92513 46.89581 227.84598 44.65956 C
227.08545 43.08378 226.95704 40.02775 226.66847 38.53446 C
226.66847 38.01090 226.66847 37.48706 226.66847 36.96406 C
226.48904 36.96973 226.00857 35.00589 225.96123 34.60819 C
226.03975 34.52939 226.11827 34.45115 226.19707 34.37235 C
226.32775 34.39871 226.45899 34.42479 226.58967 34.45115 C
226.64211 34.45115 226.69455 34.45115 226.74671 34.45115 C
227.07439 34.71080 227.56819 35.18334 227.68923 35.62923 C
227.68923 35.91666 227.68923 36.20466 227.68923 36.49294 C
227.91855 36.89235 228.43191 37.25206 228.63118 37.67074 C
230.21036 37.62737 232.21616 38.05965 232.71477 38.92706 C
233.23833 40.04220 232.74879 42.34507 233.18589 43.24620 C
233.63915 44.18107 234.30331 46.37310 234.59953 47.40803 C
235.21153 49.54592 232.79102 51.45846 234.12841 52.51294 C
235.10466 53.59465 237.16913 52.09455 237.66208 51.57043 C
238.70721 50.45981 237.54898 49.18762 238.05496 47.72239 C
238.46939 46.52220 240.85559 45.59017 241.90299 45.05244 C
243.10687 44.89512 244.31102 44.73836 245.51546 44.58161 C
245.59342 44.47672 245.67222 44.37184 245.75074 44.26724 C
245.72466 43.97896 245.69830 43.69124 245.67222 43.40353 C
244.81247 41.85383 242.26498 40.87134 241.11780 40.02661 C
240.25833 39.39364 239.73364 38.12627 238.84044 37.59194 C
237.64904 36.88044 236.26006 37.16164 235.54205 36.02154 C
235.51597 35.75962 235.48961 35.49798 235.46353 35.23606 C
234.98362 35.31628 235.09956 34.41855 235.14945 34.13679 C
236.18665 33.69090 239.76624 33.04885 240.25351 32.25203 C
241.26917 30.59206 241.15124 27.04054 240.64639 24.71329 C
240.49417 24.01115 240.15373 23.30135 240.33203 22.27918 C
244.53865 20.92847 250.63767 17.47559 245.27991 13.01244 C
241.07641 12.99515 241.06394 15.41395 237.97616 16.54639 C
237.33326 16.78195 235.19140 15.78019 234.83537 15.60387 C
234.36397 15.57780 233.89285 15.55143 233.42145 15.52535 C
231.49219 14.88841 229.06658 14.43231 227.13931 14.89720 C
226.52872 16.23061 225.45496 17.59436 224.46935 18.50939 C
224.44299 18.50939 224.41691 18.50939 224.39083 18.50939 C
224.31203 18.43115 224.23351 18.35235 224.15556 18.27383 C
224.17313 16.35420 225.83877 13.88239 224.78343 12.06992 C
224.48211 12.21676 223.91915 12.10592 223.52683 12.30576 C
222.45789 12.85002 222.10639 14.05247 221.48504 15.05424 C
221.32828 15.57780 221.17124 16.10135 221.01392 16.62491 C
220.30753 17.25307 219.60057 17.88123 218.89389 18.50939 C
218.40548 19.09276 218.60419 20.45055 218.02961 20.94406 C
217.26000 21.60539 212.95786 18.69704 210.88375 19.60838 C
209.76718 20.09962 209.16425 21.01096 208.60639 21.80778 C
@c
184.49745 45.99439 m
184.73357 46.15172 184.96857 46.30876 185.20469 46.46551 C
185.17833 46.90120 185.14942 46.87115 184.96857 47.09424 C
184.94249 47.09424 184.91613 47.09424 184.89033 47.09424 C
184.83789 47.06787 184.78545 47.04180 184.73357 47.01543 C
184.60743 46.62283 184.69446 46.33625 184.49745 45.99439 C
@c
183.86929 45.60180 m
183.97417 45.52384 184.07877 45.44504 184.18365 45.36652 C
184.26217 45.41896 184.34069 45.47140 184.41921 45.52384 C
184.41921 45.54935 184.41921 45.57572 184.41921 45.60180 C
184.41921 45.70668 184.41921 45.81128 184.41921 45.91616 C
184.34069 45.94252 184.26217 45.96860 184.18365 45.99439 C
184.13121 45.96860 184.07877 45.94252 184.02633 45.91616 C
183.97417 45.81128 183.92173 45.70668 183.86929 45.60180 C
@c
167.61402 45.28772 m
167.59786 46.93068 167.64406 48.35594 168.24217 49.60715 C
168.18973 50.18287 168.13729 50.75887 168.08485 51.33458 C
168.57694 51.39156 170.28397 51.80570 170.28397 51.80570 C
171.42831 49.79254 171.27354 47.40463 172.87540 45.75883 C
172.87540 44.97364 172.87540 44.18844 172.87540 43.40324 C
172.46693 43.22665 172.04712 42.60132 171.69732 42.30397 C
169.14728 42.25861 168.31672 43.73093 167.61402 45.28772 C
@c
163.60894 27.54028 m
163.60894 28.61320 163.60894 29.68668 163.60894 30.75987 C
165.48265 31.04759 166.42233 32.72825 167.29994 34.05827 C
168.41537 35.74743 171.44050 37.90998 173.50356 39.16261 C
174.11244 39.53197 178.05260 41.52841 177.74419 41.67553 C
178.51351 42.05679 181.78356 43.49820 181.90630 44.34576 C
181.88022 44.39792 181.85386 44.45036 181.82778 44.50280 C
181.33228 44.63887 178.68331 45.68230 178.29411 45.99439 C
177.88054 46.32605 177.53981 47.09650 177.19427 47.25128 C
177.19427 47.38167 177.19427 47.51291 177.19427 47.64359 C
179.37496 47.01770 184.03087 47.93131 185.12589 48.74315 C
185.76397 49.21654 186.57354 49.88211 187.48176 50.15650 C
188.58416 50.49014 192.47074 48.37465 193.05723 47.87943 C
193.03143 47.48655 193.00507 47.09395 192.97899 46.70107 C
192.48860 46.47883 191.85335 45.92665 191.40831 45.60180 C
191.19883 45.60180 190.98964 45.60180 190.78016 45.60180 C
189.49946 45.18935 185.58539 44.15981 184.65477 43.16769 C
184.70721 42.93184 184.75937 42.69657 184.81153 42.46072 C
185.28293 42.22517 185.75405 41.98961 186.22545 41.75405 C
186.67020 41.72797 187.11524 41.70161 187.56028 41.67553 C
189.26646 40.76589 194.40142 34.01178 190.78016 31.30951 C
190.42016 31.04107 187.39701 30.05008 187.71732 29.89616 C
186.23679 29.32923 184.63380 30.50079 183.94781 29.18948 C
183.92173 28.43036 183.89537 27.67096 183.86929 26.91213 C
183.30350 25.79216 181.84791 24.44882 180.96406 23.53521 C
180.92721 23.00939 180.89518 22.81975 181.27786 22.67121 C
181.47657 22.24630 182.20734 22.13745 182.77030 22.12186 C
183.11726 22.55017 183.29698 22.69984 183.47698 23.37817 C
186.24132 23.40255 187.56482 22.37329 189.83792 21.88630 C
190.09389 21.32532 190.87143 19.72176 190.70192 19.29487 C
190.37254 18.90794 190.06299 18.36680 189.60208 18.11679 C
187.31537 17.49997 186.37739 19.83657 184.57654 19.53043 C
184.38973 19.76258 183.26013 18.67436 183.16261 18.35235 C
183.00614 17.83417 183.37833 17.28255 183.47698 17.01723 C
183.47698 16.49367 183.47698 15.97039 183.47698 15.44683 C
183.81487 13.43055 182.96816 11.90098 181.51398 11.20620 C
179.70661 10.34277 174.92598 11.70935 173.81792 12.30548 C
173.84117 12.59121 171.76649 13.71430 171.22649 13.79764 C
171.25257 13.85008 171.27893 13.90224 171.30501 13.95468 C
173.54665 14.40680 177.53528 14.89465 179.15783 16.07499 C
179.51556 16.33493 181.48904 17.54561 180.57146 18.11679 C
179.63915 18.50145 177.11575 18.19616 176.33083 17.80243 C
175.41213 17.34151 171.48444 18.43739 171.30501 18.58819 C
170.90220 18.92494 170.69471 19.24243 170.52009 19.68718 C
170.63291 19.91480 170.64425 19.92387 170.67657 20.07978 C
173.20394 20.06306 176.86063 20.49364 179.23663 20.94378 C
179.39367 21.15326 179.55043 21.36246 179.70775 21.57194 C
179.70775 21.67654 179.70775 21.78142 179.70775 21.88630 C
179.30409 22.20378 179.19043 22.39257 178.60791 22.59269 C
178.59713 23.64463 178.51408 24.76545 179.00079 25.57701 C
179.48353 26.38233 180.93288 28.24356 180.72822 29.26800 C
180.61228 29.52652 180.49946 29.68016 180.25682 29.81764 C
178.11241 30.67427 175.75370 26.26214 174.52460 27.54028 C
174.64224 28.90970 174.87978 30.55550 175.70268 31.46683 C
177.04998 32.96013 180.61370 32.89323 181.90630 31.46683 C
183.38995 31.43055 184.00394 32.06891 184.89033 32.56611 C
185.97430 33.17414 187.47808 33.58772 188.11020 34.60791 C
188.18192 34.72356 188.17228 35.06740 188.34548 34.84318 C
189.85153 37.53723 185.86176 40.08331 184.41921 40.49745 C
181.76712 41.25940 178.56142 38.09565 177.66539 36.88526 C
175.84781 34.42961 172.45757 32.73789 170.44129 30.21024 C
169.58948 29.14243 169.78224 27.65055 169.26321 26.20545 C
168.96756 25.38255 168.40998 24.42274 168.00661 23.69254 C
166.37301 23.46690 164.63849 24.47745 164.00183 25.65553 C
163.63474 26.33414 164.06050 27.03827 163.60894 27.54028 C
@c
142.64164 33.42983 m
142.88712 33.45109 143.24400 33.59310 143.42712 33.90094 C
143.58643 34.27002 143.43024 34.41883 143.19099 34.60791 C
143.11276 34.55546 143.03395 34.50331 142.95572 34.45087 C
142.85083 34.11043 142.74595 33.77055 142.64164 33.42983 C
@c
134.16038 37.35638 m
134.44781 37.00063 134.63178 36.88441 135.10290 37.12082 C
135.14428 37.72488 135.30161 37.64551 135.41669 38.14186 C
135.33846 38.24646 135.25994 38.35134 135.18142 38.45565 C
134.94557 38.35134 134.71002 38.24646 134.47446 38.14186 C
134.34321 37.75124 134.23691 37.84450 134.16038 37.35638 C
@c
131.17606 28.32548 m
132.44202 27.72000 134.43817 29.24079 135.10290 29.89616 C
135.02409 30.23603 134.94557 30.57676 134.86706 30.91691 C
134.71002 31.04787 134.55298 31.17855 134.39594 31.30951 C
133.56794 30.75109 131.74583 29.57187 131.17606 28.79660 C
131.17606 28.63956 131.17606 28.48280 131.17606 28.32548 C
@c
123.48028 37.43518 m
123.68665 37.33398 123.75496 37.30054 124.10844 37.27786 C
125.04416 37.67443 125.29531 38.25099 125.91468 38.92706 C
125.88860 39.18841 125.86224 39.45033 125.83616 39.71225 C
125.52236 39.68617 125.20800 39.65981 124.89364 39.63373 C
124.21502 39.23717 123.54548 38.41909 123.48028 37.43518 C
@c
121.67405 30.52431 m
121.99663 30.41150 121.92718 30.38457 122.22369 30.52431 C
122.65030 31.19046 126.68372 34.50076 125.67940 35.31458 C
122.77446 36.55389 121.59014 33.03524 121.67405 30.52431 C
@c
117.98306 33.82214 m
118.16674 33.66567 118.34986 33.50835 118.53326 33.35131 C
118.87313 33.35131 119.21357 33.35131 119.55402 33.35131 C
119.79184 33.55767 119.87121 33.66850 119.94661 34.05827 C
119.73713 34.18894 119.52765 34.31991 119.31817 34.45087 C
119.29521 34.30913 118.14917 34.15776 117.98306 34.05827 C
117.98306 33.97946 117.98306 33.90094 117.98306 33.82214 C
@c
114.60643 24.39921 m
115.71420 24.66737 120.54444 27.66302 118.21918 29.03216 C
118.03550 29.03216 117.85238 29.03216 117.66898 29.03216 C
117.14995 27.13039 115.22693 26.32507 114.60643 24.39921 C
@c
107.93140 19.53043 m
107.95748 20.96986 107.98384 22.40986 108.00992 23.84929 C
109.08340 24.12765 114.66454 31.53033 115.54894 32.88047 C
115.35506 32.99669 115.28447 33.02220 114.92079 33.03723 C
114.40035 32.69480 109.48904 31.03172 108.56013 31.85943 C
108.48132 31.91187 108.40280 31.96431 108.32400 32.01647 C
108.29906 35.46057 111.02854 37.07972 112.95751 38.45565 C
114.37739 39.46876 115.22891 40.68454 116.41294 42.06813 C
117.61483 43.47326 120.76413 45.67351 121.51701 47.56535 C
121.86085 48.42822 121.91924 49.72847 121.91017 50.86318 C
123.79493 51.43606 125.24854 51.01937 126.46488 50.07798 C
125.22104 45.43285 117.49153 40.09124 113.97855 36.80674 C
113.13638 36.01928 112.17628 35.61591 111.46535 34.68671 C
111.51751 34.60791 111.56995 34.52939 111.62239 34.45087 C
112.88466 34.41997 114.69572 35.04217 115.70598 35.47162 C
117.09326 35.62838 118.48110 35.78570 119.86809 35.94274 C
121.01329 36.63156 120.82394 37.59789 121.51701 38.77002 C
122.44054 40.33191 123.13531 42.05452 124.73688 43.16769 C
125.44356 43.16769 126.15052 43.16769 126.85720 43.16769 C
127.10183 42.71641 127.58655 42.52054 127.87824 42.14665 C
128.56535 41.26450 128.97581 40.11534 129.60567 39.24085 C
130.35827 39.76753 132.10356 41.46860 131.41191 42.77452 C
131.05304 43.45257 130.21313 43.91376 130.70523 44.81688 C
130.80331 45.61483 132.77565 46.50321 133.68926 46.46551 C
133.79613 45.48699 134.69726 44.34548 135.41669 43.95260 C
137.05625 43.25244 136.58995 45.31493 136.90885 46.38756 C
137.58009 48.64479 136.21266 53.79789 139.26472 53.76926 C
139.43877 53.40444 140.84617 52.37887 141.22800 51.96274 C
141.28044 51.96274 141.33288 51.96274 141.38504 51.96274 C
141.87458 50.91874 142.26009 50.40000 142.87720 49.52835 C
143.51301 48.62976 144.20154 46.56643 144.44787 45.36652 C
144.67039 44.27972 143.50224 43.66998 143.97647 42.46072 C
144.61257 40.84016 146.48003 39.87694 147.27487 38.37770 C
147.74060 37.49868 147.55039 36.38523 148.13858 35.86450 C
149.28265 34.85112 150.62258 34.48035 151.67225 33.27279 C
151.67225 32.98479 151.67225 32.69679 151.67225 32.40907 C
151.16230 32.18598 150.61946 31.67008 150.10157 31.38803 C
149.40482 31.00876 148.36989 31.10287 147.90302 30.99572 C
146.12939 30.58639 143.90986 29.96674 142.95572 28.71808 C
142.26094 27.80901 142.29043 23.48957 141.85616 22.04334 C
141.82980 21.44126 141.80400 20.83890 141.77820 20.23710 C
141.22517 19.23647 140.95219 17.61024 140.67865 16.54611 C
140.67865 16.23175 140.67865 15.91795 140.67865 15.60387 C
139.71628 13.73187 139.18876 11.89247 138.24425 10.26369 C
138.19181 9.58337 138.13937 8.90249 138.08721 8.22189 C
138.00869 8.24825 137.93017 8.27433 137.85137 8.30069 C
137.56819 8.90249 136.84365 9.26249 136.51625 9.79228 C
135.95584 10.70022 135.79200 11.76888 135.41669 12.69836 C
135.41669 13.24800 135.41669 13.79764 135.41669 14.34699 C
134.91950 16.35987 135.38211 20.48117 135.02409 23.29937 C
134.81972 23.36769 134.74998 23.26791 134.86706 23.45669 C
132.45109 22.92945 130.41751 22.40447 128.34964 21.49342 C
127.22343 21.46706 126.09808 21.44098 124.97244 21.41490 C
123.75071 22.47250 123.96643 25.81200 124.50132 27.46176 C
125.56488 27.83906 127.27871 29.19118 127.72091 30.21024 C
127.74728 30.49795 127.77335 30.78624 127.79972 31.07395 C
129.11272 32.97685 131.19250 34.53052 130.15559 37.74898 C
130.10315 37.77506 130.05071 37.80142 129.99827 37.82750 C
126.47764 35.38318 127.14236 33.05083 124.89364 29.89616 C
123.36775 27.75458 122.17550 27.76592 121.04589 24.71329 C
120.04186 21.99912 122.38554 18.02438 122.38101 15.91824 C
122.01761 15.76431 121.86595 15.45477 121.59581 15.21099 C
121.33389 15.21099 121.07225 15.21099 120.81033 15.21099 C
120.05546 16.38652 119.32243 17.34378 118.61150 18.74466 C
118.12847 19.69682 118.43717 20.92224 117.98306 21.80778 C
117.80022 21.78142 117.61682 21.75534 117.43370 21.72898 C
115.89647 19.31726 112.68765 17.79449 108.63836 17.80243 C
108.49209 18.13635 108.14258 18.17490 108.00992 18.43087 C
107.98384 18.79710 107.95748 19.16362 107.93140 19.53043 C
@c
77.77644 30.91691 m
78.19852 30.49455 78.34110 29.64076 78.71868 29.18948 C
78.82328 29.21556 78.92816 29.24164 79.03276 29.26800 C
79.15946 29.91061 80.01496 31.52409 79.26831 32.09471 C
79.19008 32.19959 79.11156 32.30419 79.03276 32.40907 C
78.59820 32.41984 78.33543 32.37307 78.09024 32.25175 C
78.02957 31.58731 77.81641 31.65222 77.77644 30.91691 C
@c
72.59329 32.80167 m
72.61937 32.64491 72.64573 32.48759 72.67181 32.33055 C
72.72425 32.33055 72.77669 32.33055 72.82913 32.33055 C
72.90765 32.30419 72.98561 32.27811 73.06441 32.25175 C
73.22173 32.43515 73.37877 32.61855 73.53581 32.80167 C
73.55367 33.21524 73.60923 33.34876 73.45701 33.66567 C
73.40485 33.74419 73.35241 33.82214 73.30025 33.90094 C
73.22173 33.84850 73.14293 33.79663 73.06441 33.74419 C
72.90765 33.42983 72.75061 33.11575 72.59329 32.80167 C
@c
67.25367 30.99572 m
67.41043 30.91691 67.56718 30.83839 67.72450 30.75987 C
68.54655 31.00082 68.92980 31.58079 69.53074 32.01647 C
69.53074 32.25175 69.53074 32.48759 69.53074 32.72315 C
69.47830 32.72315 69.42586 32.72315 69.37342 32.72315 C
69.24274 32.74923 69.11206 32.77559 68.98110 32.80167 C
68.43005 32.10775 67.76135 31.81691 67.25367 30.99572 C
@c
62.38431 19.13783 m
62.61477 18.91984 64.61915 17.63320 64.81899 17.56687 C
65.88992 17.21367 71.69159 18.21713 72.04394 18.58819 C
71.80356 18.90680 71.68195 19.19877 71.57254 19.68718 C
71.62469 19.68718 71.67713 19.68718 71.72957 19.68718 C
73.09729 20.28501 74.86838 16.52485 76.91272 20.31562 C
78.27704 19.88135 80.67203 17.82482 82.33115 18.66671 C
85.63068 20.34000 86.33565 25.52230 86.33565 31.07395 C
86.33565 32.88302 86.63669 35.49260 86.02186 36.80674 C
86.02186 37.51313 86.02186 38.22038 86.02186 38.92706 C
86.01987 40.28400 85.86794 43.16513 85.31518 44.26696 C
85.28910 45.00000 85.26274 45.73276 85.23666 46.46551 C
84.77433 48.34403 84.39562 50.30022 83.74450 51.80570 C
75.79502 52.92765 70.55830 50.43430 67.09635 45.60180 C
66.46195 44.71682 63.81836 41.36513 64.74019 39.55521 C
66.68957 39.62778 69.26627 42.68835 70.70854 43.56028 C
70.78706 43.60762 72.04394 43.87436 72.04394 43.87436 C
78.51912 44.51017 74.53049 39.27175 74.47805 36.41414 C
75.36161 35.78882 77.93575 33.43266 79.34683 34.21531 C
79.50387 34.39843 79.66120 34.58183 79.81824 34.76466 C
81.72312 34.73093 86.08450 31.56917 83.90154 29.18948 C
83.15830 28.37906 81.75685 27.93231 80.83899 27.30472 C
79.59260 26.45235 78.34535 25.05572 77.06948 24.08485 C
76.98416 24.02022 76.37868 23.86063 76.67660 23.69254 C
75.35962 22.96715 73.56557 22.40277 72.12189 21.49342 C
71.17625 20.89757 69.26542 21.60652 68.50970 21.41490 C
68.05134 22.27181 66.57392 23.89294 67.41043 25.57701 C
67.78658 26.27376 68.89975 27.15506 69.53074 27.61909 C
69.50381 28.25433 69.37824 28.32350 68.82406 28.24724 C
67.89345 27.16611 65.32072 29.77625 65.13307 30.28847 C
65.13307 31.02151 65.13307 31.75483 65.13307 32.48759 C
65.87376 32.92186 66.29414 33.50324 67.09635 33.97946 C
68.95361 35.08186 72.53376 35.45093 71.57254 38.77002 C
71.41550 38.79609 71.25817 38.82246 71.10142 38.84854 C
69.91682 37.71780 65.34709 38.07808 64.34759 36.49266 C
63.68372 35.94189 64.36942 34.00668 63.79824 33.03723 C
63.21713 33.08655 63.46913 31.65591 63.09156 30.99572 C
61.89137 28.89780 63.28006 24.40942 62.77720 22.04334 C
62.56602 21.04753 62.42145 19.81644 62.38431 19.13783 C
@c
57.67313 18.43087 m
57.68532 21.86872 58.93512 25.19093 59.63584 28.16844 C
59.63584 28.87512 59.63584 29.58180 59.63584 30.28847 C
59.63584 33.91200 58.02917 37.36545 58.53685 40.57597 C
59.58850 47.23172 65.59398 50.82973 71.41550 52.66942 C
73.63077 53.36957 80.55468 55.55509 83.43043 53.84750 C
83.83039 53.61024 84.86816 53.74318 85.39370 53.37638 C
90.74863 49.63635 89.40557 37.39946 89.47729 28.87512 C
89.51216 24.72406 90.31720 18.61370 88.29921 16.15351 C
87.77339 15.51231 81.77074 11.37600 80.05380 12.30548 C
78.12539 13.34891 76.84724 15.85587 74.39953 15.99619 C
73.49414 16.04835 72.50173 15.24359 71.88690 14.89691 C
71.42655 14.63754 65.72409 13.82854 64.74019 14.11172 C
63.56154 14.45102 63.15619 15.28838 62.38431 15.99619 C
62.30580 15.99619 62.22784 15.99619 62.14904 15.99619 C
61.45937 15.37625 61.03843 14.48844 59.63584 14.50431 C
59.38243 15.03383 58.79395 15.48907 58.53685 15.99619 C
58.11024 16.83638 58.09975 17.59606 57.67313 18.43087 C
@c
29.00948 37.12082 m
29.30343 36.33165 29.31732 35.75594 29.63792 35.15754 C
31.22391 36.03657 37.16476 39.86277 37.33342 41.51849 C
37.28098 41.51849 37.22854 41.51849 37.17694 41.51849 C
36.17915 41.94425 34.52995 41.49184 33.72123 41.20413 C
33.06699 41.20413 32.41276 41.20413 31.75795 41.20413 C
29.44687 40.69049 28.96838 39.59065 29.00948 37.12082 C
@c
16.20935 32.80167 m
17.26101 31.79452 17.39962 30.99855 17.38743 29.03216 C
17.78854 28.85613 17.66381 28.84847 17.85827 28.56076 C
18.52724 28.50463 19.16816 28.50123 19.74302 28.63956 C
19.90800 29.12825 20.66627 29.96816 20.84258 30.52431 C
21.28422 31.91896 21.46507 35.46312 20.52850 36.25710 C
20.47606 36.33562 20.42362 36.41414 20.37118 36.49266 C
18.79370 36.48841 16.69946 34.70088 16.28787 33.50835 C
16.26180 33.27279 16.23543 33.03723 16.20935 32.80167 C
@c
9.14173 40.57597 m
10.52192 40.49943 11.21669 39.56088 11.89020 38.77002 C
12.33496 38.77002 12.78028 38.77002 13.22504 38.77002 C
13.82712 39.26721 14.42920 39.76469 15.03099 40.26161 C
16.24876 40.96460 18.07852 41.22340 19.35014 42.06813 C
20.32072 42.71272 21.20627 42.12709 21.86362 43.32472 C
22.65562 45.21061 21.26721 47.02706 21.94186 49.37131 C
22.28060 50.54797 22.53487 51.32806 22.72734 52.66942 C
22.74831 52.81739 22.52183 55.67811 22.88438 55.41789 C
22.93654 55.49669 22.98869 55.57521 23.04113 55.65345 C
25.61953 55.72800 29.17701 51.77197 31.28683 50.47087 C
31.42233 48.27146 30.59490 46.37140 30.97304 44.42400 C
33.51940 43.19688 37.08283 44.63660 39.84661 45.13068 C
40.86709 45.07824 41.88813 45.02608 42.90945 44.97364 C
43.38935 44.72249 43.88683 43.95912 44.40161 43.95260 C
44.40161 43.71704 44.40161 43.48148 44.40161 43.24592 C
43.22154 42.40658 42.44258 41.14318 41.49581 40.10513 C
40.65194 39.17962 38.31307 38.04293 36.94110 37.19934 C
35.92658 36.57572 34.40381 36.15931 34.34967 34.60791 C
34.53250 34.45087 34.71619 34.29354 34.89902 34.13650 C
36.83310 33.24472 39.58980 34.26746 40.47477 32.25175 C
40.65165 31.84980 41.00627 31.45975 40.55329 30.99572 C
39.38400 29.13874 36.22450 30.56854 34.50671 29.42532 C
33.06104 28.46268 31.68057 27.18794 30.50164 26.20545 C
29.42334 25.30602 28.03068 25.87635 27.28205 24.63477 C
26.42088 23.20668 27.20154 20.53361 26.88945 18.90198 C
26.75820 18.53575 26.62753 18.16894 26.49685 17.80243 C
24.23367 17.45263 24.76630 12.79899 23.11994 11.28472 C
22.61027 14.19279 20.89106 16.72186 20.37118 19.21606 C
20.14299 20.31194 20.78674 21.72529 19.90006 22.43565 C
19.41109 22.67490 18.41272 22.53231 17.85827 22.59269 C
17.12041 24.17811 16.63115 26.31402 14.87452 26.91213 C
14.12306 27.16781 13.77723 26.61250 12.59688 26.59805 C
12.38372 27.08135 12.14249 28.12025 11.73317 28.71808 C
11.23909 29.43950 10.07688 29.70312 9.53461 30.36728 C
9.53461 30.44580 9.53461 30.52431 9.53461 30.60283 C
9.06718 31.68000 9.52498 32.50630 9.29877 33.27279 C
9.17518 33.69061 8.53512 34.07924 8.43506 34.68671 C
9.38976 35.78854 9.16044 38.01515 9.14173 40.57597 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel16Dict 16.0 0
%%EOF
