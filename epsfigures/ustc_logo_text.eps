%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0.00000 0.00000 394.01575 65.19685 
%%LanguageLevel: 3
%%Creator: CorelDRAW X6
%%Title: ustc_logo_text.eps
%%CreationDate: Thu Jun 12 20:04:27 2014
%%DocumentProcessColors: Cyan Magenta 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 3 def
%Build: CorelDRAW X6 16.1.0.843 °æ±¾
/EpsFile true def
%%BeginResource: procset wCorel16Dict 16.0 0
/wCorel16Dict 300 dict def wCorel16Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/rp{{pop}repeat}bd/dexec{
exch begin cvx exec end}bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np
/newpath ld/Tl/translate ld/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd
/spg/showpage ld/showpage{}bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf
xd/$sdf false def/$SDF false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if exch $Scra add exch load SetScr}bd
/SeparationMode where{pop}{/SeparationMode/Composite def}ifelse
/SeparationPlateName where{pop}{/SeparationPlateName null def}ifelse
/SeparateInColor where{pop}{/SeparateInColor false def}ifelse/EpsFile where
{pop}{/EpsFile false def}ifelse/FillOverprint false def/$fil 0 def
/OutlineOverprint 0 def/$PF false def/$bkg false def/CurrentOverprint false def
matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def/$stm matrix def
/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent
16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1}
ifelse def/Level2 get_ps_level 2 ge def/Level3 get_ps_level 3 ge def
/AdobeDistiller/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse def/InRipSeparation
AdobeDistiller{false}{Level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse def/ColorSeparation/LumSepsDict where
{pop false}{/AldusSepsDict where{pop false}{InRipSeparation{true}{1 0 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 1 0 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 1 0 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne 0 0 0 1 gsave
setcmykcolor currentcmykcolor grestore add add add 0 ne and and and not}ifelse
}ifelse}ifelse def/IsColorDevice/deviceinfo where{pop deviceinfo/Colors known{
deviceinfo/Colors get exec 1 gt}{false}ifelse}{/statusdict where{pop statusdict
/processcolors known{statusdict/processcolors get exec 1 gt}{false}ifelse}{
false}ifelse}ifelse def/get_simulate_devicen get_ps_level 2 eq{{SeparationMode
/OnHost ne InRipSeparation AdobeDistiller or and}bind}{false}ifelse def
/DocGrayScaleSpace[/DeviceGray]def/DocRgbSpace[/DeviceRGB]def/DocCmykSpace
[/DeviceCMYK]def/DocLabSpace[/CIEBasedABC <</BlackPoint[0 0 0]/WhitePoint[
0.9637 1.0000 0.8241]/RangeABC[0 100 -128 127 -128 127]/DecodeABC[{16 add 116
div}bind{500 div}bind{200 div}bind]/MatrixABC[1 1 1 1 0 0 0 0 -1]/DecodeLMN[
{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 0.9637 mul
}bind{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse 1.0000
mul}bind{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul}ifelse
0.8241 mul}bind]>>]def/validate_cie_colorspace_whitepoint{load dup aload pop
/WhitePoint get 1 1.0 put pop}bd/set_cie_colorspaces{/DocGrayScaleSpaceCIE
where{pop/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint
/DocGrayScaleSpace xd DocGrayScaleSpace aload pop begin pop/DecodeA where{pop
DecodeA type/arraytype eq{DecodeA aload pop/DecodeA exch def}if}if end}if
/DocRgbSpaceCIE where{pop/DocRgbSpaceCIE validate_cie_colorspace_whitepoint
/DocRgbSpace xd}if/DocCmykSpaceCIE where{pop/DocCmykSpaceCIE
validate_cie_colorspace_whitepoint/DocCmykSpace xd}if}bd/set_rendering_intent{
Level3{findcolorrendering{/ColorRendering findresource setcolorrendering}{dup
/DefaultColorRendering eq{pop}{/ColorRendering findresource setcolorrendering}
}ifelse}{pop}ifelse}bd/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5
array astore}def}ifelse/setcustomcolor where SeparationMode/OnHost ne and{pop}
{/tint_cmyk_color{5 -1 roll dup 1 ge{pop}{4{dup 6 -1 roll mul exch}repeat pop}
ifelse}bd/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll
pop pop pop 1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/setcustomcolor{exch
aload pop SepMode_5 0 eq{pop tint_cmyk_color setprocesscolor_5}{
CurrentInkName_5 eq{4 index}{0}ifelse 6 1 roll 5 rp 1 sub neg SetGry}ifelse}bd
}ifelse/convert_rgb_to_cmyk{dup type/dicttype eq{}{3{1 exch sub 3 1 roll}
repeat 3 copy min min 3{dup 5 -1 roll sub neg exch}repeat}ifelse}bd
/safe_setcolorspace{dup currentcolorspace eq{pop}{setcolorspace}ifelse}bd
/safe_setoverprint{dup type/booleantype eq{dup currentoverprint ne{
setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse}bd/is_cmyk_channel_name{
/channel_name xd channel_name/Cyan eq channel_name/Magenta eq or channel_name
/Yellow eq or channel_name/Black eq or{true}{false}ifelse}bd
/is_rgb_channel_name{/channel_name xd channel_name/Red eq channel_name/Green eq
or channel_name/Blue eq or{true}{false}ifelse}bd/is_spot_channel_name{
/channel_name xd channel_name is_cmyk_channel_name channel_name
is_rgb_channel_name or channel_name/Gray eq or{false}{true}ifelse}bd
/spot_tint_transform_proc{/alternativeSpace xd/alternativeColors xd/tint xd
alternativeSpace DocLabSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3
def}{alternativeSpace DocCmykSpace eq{/mixMethod/Subtractive def
/altSpaceNumChannels 4 def}{alternativeSpace DocRgbSpace eq{/mixMethod
/Additive def/altSpaceNumChannels 3 def}{alternativeSpace DocGrayScaleSpace eq
{/mixMethod/Additive def/altSpaceNumChannels 1 def}if}ifelse}ifelse}ifelse
alternativeSpace DocLabSpace eq{alternativeColors aload pop tint mul 3 1 roll
tint mul 3 1 roll dup 100 exch sub 1 tint sub mul add 3 1 roll}{/tintedColor
altSpaceNumChannels{0.0}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def alternativeColors
altChannelIndex get mixMethod/Additive eq{1.0 exch sub tint mul 1.0 exch sub}{
tint mul}ifelse tintedColor altChannelIndex 3 2 roll put}for tintedColor aload
pop}ifelse}bd/devicen_colorant_mixer_proc{/numChannels xd/alternativeSpace xd
/channelNames xd/alternativeColors xd numColorants array astore/colorants xd
/is_spot_channel_name_loc{is_spot_channel_name}bind def alternativeSpace
DocCmykSpace eq{/mixMethod/Subtractive def/altSpaceNumChannels 4 def
/is_spot_channel_name_loc{is_cmyk_channel_name not}bind def}{alternativeSpace
DocRgbSpace eq{/mixMethod/Additive def/altSpaceNumChannels 3 def
/is_spot_channel_name_loc{is_rgb_channel_name not}bind def}{alternativeSpace
DocGrayScaleSpace eq{/mixMethod/Additive def/altSpaceNumChannels 1 def
/is_spot_channel_name_loc{/Gray ne}bind def}if}ifelse}ifelse mixMethod
/Additive eq{/mixedColor altSpaceNumChannels{0.0}repeat altSpaceNumChannels
array astore def/bProcessPlateTinted false def 0 1 numChannels 1 sub{
/channelIndex exch def channelNames channelIndex get is_spot_channel_name_loc
/bSpotChannel xd/sourceChannel colorants channelIndex get def/bWhiteBackground
0 mixedColor{add}forall altSpaceNumChannels div 0.999 gt bProcessPlateTinted
and def bSpotChannel bProcessPlateTinted not and{/bSpotChannel false def}if 0 1
altSpaceNumChannels 1 sub{/altChannelIndex exch def/mixedChannel mixedColor
altChannelIndex get def sourceChannel alternativeColors channelIndex get
altChannelIndex get 1.0 exch sub mul 1.0 exch sub dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if bSpotChannel{sourceChannel 0.0 gt{mixedChannel mul}{pop
mixedChannel}ifelse}{/bProcessPlateTinted true def globaldict begin
/bSkipDeviceNImage where{pop false}{true}ifelse end DevicenImage and{pop
sourceChannel alternativeColors channelIndex get altChannelIndex get mul
mixedChannel add}{mixedChannel add}ifelse}ifelse dup 1.0 gt{pop 1.0}if dup 0.0
lt{pop 0.0}if mixedColor altChannelIndex 3 2 roll put}for}for}{/mixedColor
altSpaceNumChannels{1}repeat altSpaceNumChannels array astore def 0 1
altSpaceNumChannels 1 sub{/targetIndex exch def 0 1 numColorants 1 sub{
/sourceIndex exch def colorants sourceIndex get alternativeColors sourceIndex
get targetIndex get mul 1 exch sub mixedColor targetIndex get mul mixedColor
targetIndex 3 2 roll put}for mixedColor targetIndex 1 mixedColor targetIndex
get sub put}for}ifelse mixedColor aload pop}bd/ColorSpec 9 dict begin/color[]
def/names[]def/num 0 def/ColorModel null def/ColorSpace[]def/set_color{
ColorSpace safe_setcolorspace color aload pop setcolor}bd/separate_set_color{
SeparationMode/OnHost eq{separate_color{/set_color dexec true}{pop
currentoverprint{false}{SeparateInColor{0 0 0 0 SetCmyk_5 true}{1 SetGry true}
ifelse}ifelse}ifelse}{set_color true}ifelse}bd/separate_color{currentdict false
}bd/convert_to_cmyk{currentdict}bd currentdict end def/GrayscaleColorSpec
ColorSpec 9 dict copy begin/names{/Black}def/num 1 def/ColorModel/Grayscale def
/ColorSpace DocGrayScaleSpace def/separate_color{currentdict false
SeparationMode/OnHost eq{SeparationPlateName/Black eq{SeparateInColor{pop
convert_to_cmyk true}{pop true}ifelse}if}if}bd/convert_to_cmyk{0 0 0 color
aload pop 1 exch sub create_cmyk_color}bd currentdict end def
/create_grayscale_color{GrayscaleColorSpec 9 dict copy begin/color exch 1 array
astore def/ColorSpace DocGrayScaleSpace def currentdict end}bd/RgbColorSpec
ColorSpec 9 dict copy begin/names{/Red/Green/Blue}def/num 3 def/ColorModel/Rgb
def/ColorSpace DocRgbSpace def/separate_color{convert_to_cmyk/separate_color
dexec}bd/convert_to_cmyk{color aload pop convert_rgb_to_cmyk create_cmyk_color
}bd currentdict end def/create_rgb_color{RgbColorSpec 9 dict copy begin 3 array
astore/color exch def/ColorSpace DocRgbSpace def currentdict end}bd
/CmykColorSpec ColorSpec 9 dict copy begin/names{/Cyan/Magenta/Yellow/Black}
def/num 4 def/ColorModel/Cmyk def/ColorSpace DocCmykSpace def/separate_color{
currentdict false SeparationPlateIndex 0 ge SeparationPlateIndex 3 le and{
color SeparationPlateIndex get dup 0 gt{3 1 roll pop pop SeparateInColor{0 0 0
4 SeparationPlateIndex roll create_cmyk_color true}{1 exch sub
create_grayscale_color true}ifelse}{pop}ifelse}if}bd/convert_to_cmyk{
currentdict}bd currentdict end def/create_cmyk_color{CmykColorSpec 9 dict copy
begin 4 array astore/color exch def/ColorSpace DocCmykSpace def currentdict end
}bd/SpotColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel/Spot def
/separate_color{currentdict false SeparationPlateIndex 4 eq{names aload pop
SeparationPlateName eq{color aload pop dup 0 gt{3 1 roll pop pop
SeparateInColor{pop convert_to_cmyk true}{1 exch sub create_grayscale_color
true}ifelse}{pop}ifelse}if}if}bd/convert_to_cmyk{/alternativeSpace ColorSpace 2
get def/tintTransformProc ColorSpace 3 get def alternativeSpace DocCmykSpace eq
{color aload pop tintTransformProc create_cmyk_color}{alternativeSpace
DocRgbSpace eq{color aload pop tintTransformProc create_rgb_color
/convert_to_cmyk dexec}{alternativeSpace DocGrayScaleSpace eq{0 0 0 color aload
pop 1 sub create_cmyk_color}if}ifelse}ifelse}bd currentdict end def
/create_spot_colorspace{load/alternativeSpace xd/alternativeColor xd/name xd[
/Separation name alternativeSpace[alternativeColor alternativeSpace
/spot_tint_transform_proc cvx]cvx]}bd/create_spot_color{SpotColorSpec 9 dict
copy begin dup type/arraytype ne{create_spot_colorspace}if/ColorSpace xd/color
exch 1 array astore def ColorSpace 1 get 1 array astore/names xd currentdict
end}bd/DevicenColorSpec SpotColorSpec 9 dict copy begin/ColorModel/DeviceN def
/set_color{Level3{ColorSpace safe_setcolorspace color aload pop setcolor}{
ColorSpace 2 get setcolorspace color aload pop ColorSpace 3 get exec setcolor}
ifelse}bd/separate_color{currentdict false/PlateIndex -1 def 0 1 num 1 sub{dup
names exch get SeparationPlateName eq{/PlateIndex xd exit}if pop}for PlateIndex
0 ge{color PlateIndex get dup 0 gt{SeparateInColor{num 1 sub{0}repeat num
PlateIndex roll ColorSpace create_devicen_color/convert_to_cmyk dexec true}{1
exch sub create_grayscale_color true}ifelse 4 2 roll pop pop}{pop}ifelse}if}bd
/get_ink_as_spot{dup/indexInk xd dup color exch get exch names exch get[1.0 num
1 sub{0}repeat num indexInk roll ColorSpace 3 get exec]ColorSpace 2 get
create_spot_color}bd currentdict end def/create_devicen_colorspace{
/numColorants xd load/alternativeSpace xd bind/tintTransform exch def/names xd
[/DeviceN names alternativeSpace/tintTransform load]}bd/create_devicen_color{
DevicenColorSpec 9 dict copy begin dup type/arraytype ne{
create_devicen_colorspace}if/ColorSpace xd/num ColorSpace 1 get length def
/names ColorSpace 1 get def num array astore/color xd currentdict end}bd
/RegistrationColorSpec ColorSpec 9 dict copy begin/num 1 def/ColorModel
/Registration def/ColorSpace{[/Separation/All DocCmykSpace{dup dup dup}]}def
/names[/All]def/separate_color{SeparateInColor{convert_to_cmyk true}{color
aload pop 1 exch sub create_grayscale_color true}ifelse}bd/convert_to_cmyk{
color aload pop dup dup dup create_cmyk_color}bd currentdict end def
/create_registration_color{RegistrationColorSpec 9 dict copy begin 1 array
astore/color xd currentdict end}bd/LabColorSpec ColorSpec 9 dict copy begin
/names{/L/a/b}def/num 3 def/ColorModel/Lab def/ColorSpace DocLabSpace def
/separate_color{convert_to_cmyk/separate_color dexec}bd/convert_to_cmyk{0 0 0 0
create_cmyk_color}bd currentdict end def/create_lab_color{LabColorSpec 9 dict
copy begin 3 array astore/color exch def/ColorSpace DocLabSpace def currentdict
end}bd/set_solid_fill{/FillColor xd/$fil 0 def}bd/set_outline{/OutlineColor xd
}bd/CheckLevelCompatibility{/DocPsLevel where{pop DocPsLevel get_ps_level gt{
@np/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level of Corel document is higher than the PostScript)show 72
132 m(level of this device. Change the PS Level in the Corel application)show
72 120 m(by selecting the PostScript tab in the print dialog, and selecting)
show 72 108 m(document level from the Compatibility drop down list.)show flush
spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known{systemdict
/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd/AutoFlatness where{pop
AutoFlatness{/@ifl{dup currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if}if/@ssa Level2{{true
setstrokeadjust}}{{}}ifelse bd/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/FillOverprint xd}bd/R{/OutlineOverprint
xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m
/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld
/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1 exch sub 0 0 0 4 roll 3
create_cmyk_color set_solid_fill/$fil 0 def}bd/G{1 sub neg 0 0 0 4 -1 roll
create_cmyk_color set_outline}bd/i{dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll
2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd
matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm exch dup concatmatrix
/$ptm xd}if/patternScallingMatrix where{pop patternScallingMatrix $ptm matrix
concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd/$scf xd}if
}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0 eq{$dsf 3 1
roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp xd/$dsa xd
/$dsf xd}bd/$ngx{$SDF{$SCF SeparationMode/Composite eq{$SCA}{$dsa}ifelse $SCP
@ss}if}bd/min{2 copy le{pop}{exch pop}ifelse}bd/max{2 copy ge{pop}{exch pop}
ifelse}bd/in_range{3 -1 roll min max}bd/InRange/in_range load bd/@sqr{dup 0 rl
dup 0 exch rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix
idtransform dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup
3 -1 roll eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch
pop abs 1 exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}
if exch}repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy min min 3{
dup 5 -1 roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul
add 1 index .114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{
/CorelImage systemdict/image get def/CorelSetGray systemdict/setgray get def
/CorelGetGray systemdict/currentgray get def/CorelSetTransfer systemdict
/settransfer get def/CorelGetTransfer systemdict/currenttransfer get def
/SetRgb/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry
/currentgray ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict
/currentrgbcolor get def/SetHsb systemdict/sethsbcolor get def/GetHsb
systemdict/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll
dup floor sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict
where{pop/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where
{pop/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5
/setcmykcolor ld}ifelse}ifelse}{/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse
/currentcmykcolor where{pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb
rgb2cmyk}bd}ifelse/setoverprint where{pop}{/setoverprint{/CurrentOverprint xd}
bd}ifelse/currentoverprint where{pop}{/currentoverprint{CurrentOverprint}bd}
ifelse/colorimage where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd
/$multi xd $multi true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch
pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop
pop exch pop abs{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd
{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv
getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1
index get 255 div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div
$dat 4 index 3 add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1
roll put}for $dat 0 $dat length ncolors idiv getinterval}if}ifelse}image}
ifelse}bd}ifelse/setcmykcolor{create_cmyk_color/separate_set_color dexec
/$ffpnt xd}bd/currentcmykcolor{GetCmyk}bd/sethsbcolor{hsb2rgb setrgbcolor}bd
/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SeparationMode/Composite eq{IMAGE}{dup
type/dicttype eq{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8
eq exch/BitsPerComponent get 1 eq or currentcolorspace 0 get DocGrayScaleSpace
eq and{SeparationPlateName(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get
abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{
SeparationPlateName(Black)eq{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}
repeat}ifelse}{IMAGE}ifelse}ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/$fm 0
def/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SeparationMode/Composite eq{
true}{$Psc 0 ne or $ink_5 3 eq or}ifelse{0 J 0 j[]0 d FillOverprint
safe_setoverprint FillColor/separate_set_color dexec pop $ctm setmatrix 72 1000
div dup matrix scale dup concat dup Bburx exch Bbury exch itransform ceiling
cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform floor cvi
/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry wfill}
ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if
FillOverprint safe_setoverprint $fil 1 eq{CorelPtrnDoFill}{$fil 2 eq
{gradient_fill}{$fil 3 eq{@Pf}{get_simulate_devicen FillColor/ColorModel get
/DeviceN eq and{0 1 FillColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if
FillColor/get_ink_as_spot dexec/set_color dexec @gs wfill @gr}for}{FillColor
/separate_set_color dexec{wfill}{@np}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{
$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm
setmatrix $SDF{$SCF $SCA $SCP @ss}if OutlineOverprint safe_setoverprint
get_simulate_devicen OutlineColor/ColorModel get/DeviceN eq and{0 1
OutlineColor/num get 1 sub{dup 0 gt{true safe_setoverprint}if OutlineColor
/get_ink_as_spot dexec/set_color dexec matrix currentmatrix $ptm concat @gs
stroke @gr setmatrix}for}{OutlineColor/separate_set_color dexec{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}ifelse $SDF{$dsf $dsa
$dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{5 array
astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{/$ctm
$ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{@cp}bd
/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{@gs S
@gr F}bd/@b{@cp @B}bd/init_separation{/SeparationMode where{pop}{
/SeparationMode/Composite def}ifelse/SeparationPlateName where{pop}{
/SeparationPlateName null def}ifelse/SeparateInColor where{pop}{
/SeparateInColor false def}ifelse SeparationMode/Composite eq{
/SeparationPlateIndex -1 def}{/SeparationPlateIndex 4 def}ifelse/CmykPlates[
/Cyan/Magenta/Yellow/Black]def 0 1 3{dup CmykPlates exch get
SeparationPlateName eq{/SeparationPlateIndex xd exit}if pop}for
/CurrentInkName_5 SeparationPlateName def/$ink_5 SeparationPlateIndex def
SeparationMode/OnHost eq{/SepMode_5 2 def}{/SepMode_5 0 def}ifelse/SepsColor
SeparateInColor def}bd/init_separation_from_legacy{EpsFile{/SepMode_5 where{
pop SepMode_5 2 eq{/SeparationMode/OnHost def}{/SeparationMode/Composite def}
ifelse}if/CurrentInkName_5 where{pop/SeparationPlateName CurrentInkName_5 def}
if/$ink_5 where{pop/SeparationPlateIndex $ink_5 def}if/SepsColor where{pop
/SeparateInColor SepsColor def}if}if}bd init_separation_from_legacy/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
%----------------------------------------------------------------------------
% Raster images support
/set_image_clipping{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index
3 index l 3 index 3 index l clip pop pop pop pop}bd/set_image_parameters{/$frg
xd/$bkg xd/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd}bd
/output_image{/@cc xd @sm @gs set_image_clipping set_image_parameters
SeparationMode/OnHost eq EpsFile and{separate_output_image}{
output_composite_image}ifelse @gr $ctm setmatrix}bd/output_composite_image{
DocPsLevel 3 eq MaskedImage true eq and{output_masked_image}{$bts 1 gt
DocPsLevel 2 eq DocPsLevel 3 eq or and{DevicenImage{output_devicen_image}{
output_color_image}ifelse}{$bts 1 eq{output_monochrome_image}{
output_color_image_level1}ifelse}ifelse}ifelse}bd/separate_output_image{@gs
$bts 1 gt{separate_output_color_image}{separate_output_monochrome_image}ifelse
@gr not{currentoverprint not{1.0 SetGry wfill}if}if @np}bd/set_decode_filter{
ImageCompression/JPEG eq{/DCTDecode filter}{ImageCompression/RLE eq{
/RunLengthDecode filter}{ImageCompression/LZW eq{/LZWDecode filter}if}ifelse}
ifelse}bd/create_datasource{currentfile DevicenImage not get_ps_level 2 gt or{
/ASCII85Decode filter}if set_decode_filter}bd/set_image_strip_parameters{
/stripRows xd/numPlanes xd/stripBuffer $wid $bts mul $ncl mul stripRows mul 8
div ceiling cvi dup 65535 gt{pop $ncl $bts mul}if string def DevicenImage{
/readstrip{DataSource stripBuffer readhexstring pop}bd}{/readstrip{DataSource
stripBuffer readstring pop}bd}ifelse/stripHeight $lly $ury sub stripRows mul
$hei div def/stripOutBuffer $wid stripRows mul numPlanes mul 65535 min string
def/strip_img_dict 8 dict def strip_img_dict begin/ImageType 1 def/Width $wid
def/Height stripRows def/BitsPerComponent $bts def/Decode[numPlanes{0 1}
repeat]def/ImageMatrix[$wid 0 0 stripRows neg 0 $hei 0 gt{stripRows}{0}ifelse]
def/DataSource stripOutBuffer def end}bd/separate_output_color_image{
/plateContent false def $ncl 1 eq{SeparationPlateName/Black eq{
output_color_image/plateContent true def}if}{@np/DataSource create_datasource
def SeparateInColor{DocCmykSpace setcolorspace/numPlanes 4 def}{
DocGrayScaleSpace setcolorspace/numPlanes 1 def}ifelse/stripRows 65535 $wid
$bts mul $ncl numPlanes max mul 8 div div floor cvi 1 max def numPlanes
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{numPlanes $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 $wid stripRows mul 1 sub{/pixelIndex xd stripBuffer
pixelIndex $ncl mul $ncl getinterval{255 div}forall DevicenImage{
ImageDevicenSpace create_devicen_color}{$ncl 3 eq{create_rgb_color}{
create_cmyk_color}ifelse}ifelse/separate_color dexec{/plateContent true def
begin color aload pop end}{pop numPlanes[numPlanes 1 eq{1}{0}ifelse]cvx repeat
}ifelse numPlanes array astore/pixelSepIndex pixelIndex numPlanes mul def
/posColorant 0 def{stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}ifelse plateContent}bd/separate_output_monochrome_image{
SeparationPlateName/Black eq{output_monochrome_image true}{false}ifelse}bd
/output_monochrome_image{$frg 1 eq{OutlineOverprint safe_setoverprint
ImageForegroundColor/separate_set_color dexec{1}{0}ifelse/$frg xd}{/$frg false
def}ifelse $bkg 1 eq{@gs $ctm setmatrix F @gr}if @np/$dat $wid $bts mul 8 div
ceiling cvi 65535 min string def $bkg $frg add 1 ge{$SDF{$SCF $SCA $SCP @ss}if
$llx $lly Tl $urx $llx sub $ury $lly sub scale $bkg 1 eq{FillColor
/separate_set_color dexec pop}if $wid $hei abs $bts 1 eq{$bkg 1 ge}{$bts 1 ge}
ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts 1 eq
{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}repeat}
ifelse}bd/output_color_image_level1{@np $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min string def $msimage
false eq $ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div
ceiling cvi $ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def
/$dat3 exch string def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch
string def/$dat2 exch string def/$dat3 exch string def/$dat4 exch string def
/@cc1 load/@cc2 load/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse
$SDF{$dsf $dsa $dsp @ss}if}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2
{currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring
pop}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def
/ImageCompression/None def/MaskedImage false def/DevicenImage false def
/output_color_image{@np $ncl 1 eq{DocGrayScaleSpace}{$ncl 3 eq{DocRgbSpace}
{DocCmykSpace}ifelse}ifelse setcolorspace/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi 65535 min string def $ngx $llx $lly Tl $urx $llx sub $ury $lly sub
scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if}bd/simulate_devicen_image{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def/DataSource create_datasource def
/stripRows 65535 $wid $bts mul $ncl mul 8 div div floor cvi 1 max def 1
stripRows set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling
cvi 1 sub def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight
stripIndex mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi
def stripIndex maxStripIndex eq{1 $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale 0 1 $ncl
1 sub{@gs/inkIndex exch def 0 1 stripOutBuffer length 1 sub{dup $ncl mul
inkIndex add stripBuffer exch get stripOutBuffer 3 1 roll put}for[/Separation
colorantNames inkIndex get altColorSpace{$ncl 1 sub{0}repeat $ncl inkIndex roll
tintProc}]setcolorspace inkIndex 0 gt{true setoverprint}if strip_img_dict image
@gr}for @gr}for $SDF{$dsf $dsa $dsp @ss}if}bd/output_devicen_image_alt{@np $ngx
/colorantNames ImageDevicenSpace 1 get def/altColorSpace ImageDevicenSpace 2
get def/tintProc ImageDevicenSpace 3 get def altColorSpace DocCmykSpace eq{
/numAltChannels 4 def}{altColorSpace DocRgbSpace eq{/numAltChannels 3 def}{
/numAltChannels 1 def}ifelse}ifelse/DataSource create_datasource def
altColorSpace setcolorspace/stripRows 65535 $wid $bts mul $ncl numAltChannels
max mul 8 div div floor cvi 1 max def numAltChannels stripRows
set_image_strip_parameters/maxStripIndex $hei stripRows div ceiling cvi 1 sub
def 0 1 maxStripIndex{/stripIndex exch def/$t_ury $ury stripHeight stripIndex
mul add ceiling cvi def/$t_lly $t_ury stripHeight add ceiling cvi def
stripIndex maxStripIndex eq{numAltChannels $hei maxStripIndex stripRows mul sub
set_image_strip_parameters/$t_lly $t_ury stripHeight add ceiling cvi def}if
readstrip pop @gs 0 1 stripBuffer length $ncl div cvi 1 sub{/pixelIndex xd
stripBuffer pixelIndex $ncl mul $ncl getinterval{255 div}forall tintProc exec
numAltChannels array astore/pixelAltIndex pixelIndex numAltChannels mul def
/posColorant 0 def{stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255
mul cvi put/posColorant posColorant 1 add def}forall}for $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale strip_img_dict image @gr}for $SDF{$dsf $dsa
$dsp @ss}if}bd/output_devicen_image_native{@np $ngx ImageDevicenSpace
setcolorspace/scanline $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def/readscanline{currentfile scanline readhexstring pop}bind def $llx
$lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin/ImageType 1 def/Width
$wid def/Height $hei abs def/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]
def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource{
readscanline}def currentdict end image $SDF{$dsf $dsa $dsp @ss}if}bd
/output_devicen_image{Level3{output_devicen_image_native}{get_simulate_devicen
{simulate_devicen_image}{output_devicen_image_alt}ifelse}ifelse}bd
/output_masked_image{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi 65535 min
string def $ngx DevicenImage{ImageDevicenSpace}{$ncl 1 eq{DocGrayScaleSpace}{
$ncl 3 eq{DocRgbSpace}{DocCmykSpace}ifelse}ifelse}ifelse setcolorspace $llx
$lly Tl $urx $llx sub $ury $lly sub scale/ImageDataDict 8 dict def
ImageDataDict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei
neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource create_datasource def end
/MaskedImageDict 7 dict def MaskedImageDict begin/ImageType 3 def
/InterleaveType 3 def/MaskDict ImageMaskDict def/DataDict ImageDataDict def end
MaskedImageDict image $SDF{$dsf $dsa $dsp @ss}if}bd/set_image_mask{/$mbts xd
/$mhei xd/$mwid xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def
/Width $mwid def/Height $mhei abs def/BitsPerComponent $mbts def/DataSource
maskstream def/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]
def/Decode[1 0]def end}bd/@daq{dup type/arraytype eq{aload pop}if}bd
/skip_image_body{8 rp/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd
/$wid xd DevicenImage not ImageCompression/JPEG eq or ImageCompression/RLE eq
or ImageCompression/LZW eq or{create_datasource flushfile}{/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi dup 65535 gt{pop $bts $ncl mul}if string def
/upperBound $wid $hei mul $bts mul $ncl mul scanline length div cvi 1 sub def 0
1 upperBound{pop currentfile scanline readhexstring pop pop}for}ifelse}bd
/disable_raster_output{deflevel 0 eq{@rs}if/output_image load
/output_image_original exch def/output_image/skip_image_body load def
globaldict begin/bSkipDeviceNImage true def end deflevel 0 eq{@sv}if}def
/enable_raster_output{deflevel 0 eq{@rs}if/bSkipDeviceNImage where{
/bSkipDeviceNImage undef/output_image/output_image_original load def}if
deflevel 0 eq{@sv}if}def
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel16Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
8.50394 8.50394 385.51181 56.69291 @E
/$fm 1 def
 0 O 0 @g
1.0000 0.8000 0.0000 0.0000  create_cmyk_color set_solid_fill
360.88356 49.10967 m
360.90935 49.75654 360.93572 50.40369 360.96180 51.05027 C
362.94406 51.59197 361.68746 55.96668 363.69723 56.69291 C
364.36394 56.69291 L
364.57398 55.91650 365.18939 54.90283 365.43742 54.07824 C
365.43742 53.50932 365.43742 52.93984 365.43742 52.37065 C
366.14268 49.18082 365.66674 47.80488 365.04454 45.07257 C
361.97688 44.69754 362.25439 47.28983 360.88356 49.10967 C
@c
368.97052 26.67203 m
368.94756 30.33865 371.94123 29.58775 374.62394 30.39874 C
375.82781 30.76243 377.96854 31.78176 378.78520 32.65002 C
379.20869 33.10072 379.36715 33.84057 379.80539 34.28050 C
379.65033 34.52060 379.54800 35.00306 379.41307 35.28992 C
378.83083 35.59578 378.02353 36.20324 377.52888 36.37672 C
376.74255 36.65282 375.89669 36.44022 375.25153 36.76507 C
371.43751 36.40961 365.69140 33.34847 364.41666 30.78680 C
364.39058 30.11414 364.36450 29.44120 364.33814 28.76825 C
364.97225 28.39550 365.44932 27.76989 365.83030 27.13748 C
365.72145 25.46816 365.77077 23.50828 363.86702 23.41077 C
363.28620 23.78863 362.99254 24.01087 362.45367 24.49814 C
361.81644 23.99698 361.55027 23.90287 360.56948 24.10951 C
360.05102 25.09115 357.63591 30.70998 357.90009 31.56293 C
358.18980 32.39320 359.62951 32.64718 360.25540 32.96041 C
361.77052 33.72038 362.87688 35.50139 364.18082 36.53178 C
364.86737 37.07433 365.73619 36.89745 366.61493 37.30847 C
368.68054 38.27452 370.17496 40.57313 371.87603 42.27732 C
373.73159 44.13685 376.46561 44.43364 377.99972 46.54743 C
377.94728 46.65090 377.89512 46.75436 377.84324 46.85811 C
377.81688 46.85811 377.79080 46.85811 377.76472 46.85811 C
376.60309 45.80957 373.14170 43.44265 370.85528 45.07257 C
370.10268 45.60831 370.11146 46.98935 369.59896 47.78986 C
369.27808 48.29046 368.50450 48.48435 368.42088 49.18734 C
368.55213 49.54961 368.68280 49.91216 368.81320 50.27443 C
370.34617 50.28803 373.26387 48.24935 374.15310 47.40151 C
376.30318 48.07672 378.50230 48.71934 380.59115 49.88608 C
381.39024 50.33225 382.62019 49.39228 382.94617 49.65335 C
383.98280 48.90699 385.55972 44.90334 383.49581 44.06287 C
382.53572 43.77883 380.99254 43.85395 379.96271 43.59713 C
377.47191 42.97550 374.36683 41.41587 372.73975 39.79276 C
372.76583 39.74117 372.79219 39.68957 372.81798 39.63770 C
372.86986 39.63770 372.92230 39.63770 372.97474 39.63770 C
373.90365 39.37294 375.59934 39.98438 376.82249 39.40498 C
379.72063 38.03017 383.40595 36.87619 383.33906 32.33934 C
382.77099 32.12476 382.44302 31.57824 381.84718 31.32992 C
380.33858 30.70205 378.80334 30.79814 377.60740 30.01039 C
377.60740 29.85534 377.60740 29.70000 377.60740 29.54438 C
377.92290 29.13194 378.24406 28.70504 378.23556 27.68145 C
377.75962 27.36340 377.86932 26.74063 377.52888 26.28369 C
376.36469 24.72123 374.72003 23.45953 374.23106 21.62523 C
374.51906 21.31512 374.80677 21.00416 375.09534 20.69348 C
377.24939 19.88986 386.73241 24.96954 385.38028 19.37367 C
385.18951 18.58394 384.67077 18.22422 384.43833 17.58784 C
383.28917 17.57282 382.77978 17.78825 382.00450 17.97619 C
380.66031 18.30161 376.39219 16.78989 375.64413 16.26803 C
375.87090 14.83285 376.03616 13.48243 376.03729 11.60986 C
375.65688 11.41654 375.57865 10.96384 375.25153 10.75550 C
374.54457 10.30479 373.76419 10.31443 372.97474 9.97965 C
372.51014 9.78208 371.60362 9.12019 370.93380 8.89228 C
366.40998 7.35534 361.83033 11.43326 360.80504 14.40482 C
360.83112 14.43090 360.85748 14.45669 360.88356 14.48277 C
362.16482 14.46888 364.00847 13.02265 365.28009 12.38627 C
365.88274 12.36047 366.48425 12.33439 367.08605 12.30860 C
370.47175 12.30860 372.59206 13.66441 374.07430 15.72463 C
374.04822 15.98343 374.02186 16.24224 373.99550 16.50132 C
373.81209 16.60450 373.62926 16.70825 373.44586 16.81200 C
371.58661 17.58614 368.38375 15.80372 366.85106 15.56929 C
365.22935 15.32154 361.51965 15.39553 360.25540 16.19065 C
359.93310 16.39304 359.68535 16.93956 359.47020 17.04444 C
359.47020 17.38091 359.47020 17.71767 359.47020 18.05386 C
359.81065 18.31266 360.15052 18.57175 360.49068 18.83055 C
362.74110 18.83055 364.99266 18.83055 367.24365 18.83055 C
367.91518 19.02643 368.74743 19.70476 369.36312 19.91735 C
370.33342 20.25184 371.33348 20.14186 372.18954 20.30513 C
372.32079 20.46076 372.45118 20.61609 372.58243 20.77115 C
372.52828 21.38060 371.96164 22.11704 372.26835 23.02299 C
372.82337 24.66198 373.50680 25.75446 374.30957 27.37077 C
374.12022 27.61937 373.92151 27.77924 373.60318 27.68145 C
372.20882 27.58167 371.08460 26.67685 368.97052 26.67203 C
@c
326.49392 25.19660 m
326.46217 25.66120 326.21839 25.47184 326.49392 25.66233 C
326.78391 27.31918 329.67411 28.26539 331.43981 27.13748 C
333.78548 25.64022 337.97764 22.69899 337.56378 18.67493 C
335.82331 17.86224 335.78759 16.08151 333.08844 16.19065 C
332.87329 16.75786 332.04359 17.30835 331.67565 17.82113 C
331.51890 18.46800 331.36129 19.11515 331.20425 19.76173 C
330.50636 21.42369 328.06602 25.06280 326.49392 25.19660 C
@c
312.43918 35.36731 m
312.51713 35.57452 312.59594 35.78145 312.67446 35.98866 C
313.88712 35.86479 315.18964 35.56346 316.36517 35.21197 C
317.77965 34.78932 322.49395 36.56693 322.80321 37.15313 C
323.59380 38.50866 323.39622 46.53014 322.80321 47.78986 C
322.26265 48.93732 321.40148 49.30157 321.39014 51.12822 C
322.55206 51.60132 322.52031 51.77452 324.45184 51.74929 C
326.58265 50.27244 326.65096 46.97065 326.65039 43.44208 C
326.65039 42.24019 326.29493 38.54551 326.49392 38.39528 C
327.48151 38.10784 331.03474 39.51978 331.67565 39.94809 C
331.78649 41.13241 331.33323 41.64775 330.49786 42.27732 C
330.52394 42.66539 330.55030 43.05373 330.57638 43.44208 C
330.73313 43.41600 330.89046 43.39020 331.04750 43.36413 C
331.72724 43.00214 332.29616 42.21241 333.01020 41.96693 C
334.93606 41.30504 336.88630 41.72060 338.74214 41.19024 C
338.85723 40.86113 338.92413 40.94561 339.05565 40.64683 C
339.05565 40.18082 339.05565 39.71537 339.05565 39.24935 C
338.61855 39.05518 338.50942 38.47521 338.11370 38.24022 C
337.58220 37.92416 336.04157 38.07836 335.36580 37.85187 C
333.53235 37.23732 326.52142 34.46391 325.23704 33.11603 C
324.45184 32.29143 324.87279 30.77660 324.45184 29.54438 C
323.29644 26.15981 320.92299 18.92154 316.20784 20.77115 C
315.86769 20.79723 315.52753 20.82302 315.18709 20.84910 C
314.52180 21.23291 313.96450 21.95405 313.30290 22.32425 C
313.32926 22.63465 313.35534 22.94532 313.38170 23.25572 C
313.92255 23.48277 314.59294 24.43266 314.95153 24.57553 C
316.16135 25.05713 317.35332 24.87175 318.32759 25.35222 C
319.59269 25.97499 322.16230 30.33156 321.70394 31.71855 C
319.73187 32.05106 317.29124 31.70324 315.10885 31.71855 C
314.54107 32.53833 313.56425 33.09335 312.98854 33.89244 C
312.67446 34.32841 312.70337 34.90299 312.43918 35.36731 C
@c
285.90094 51.43890 m
285.90094 51.80088 285.90094 52.16343 285.90094 52.52570 C
286.03162 52.62917 286.16202 52.73263 286.29326 52.83638 C
289.36431 52.50217 295.25329 52.10220 295.16542 48.02258 C
293.91364 46.04655 293.39858 44.51924 290.21924 45.53830 C
289.97546 46.05307 289.67924 46.77052 289.43376 47.24646 C
288.98901 47.34964 288.54425 47.45339 288.09921 47.55713 C
288.14117 48.94044 286.66687 51.12680 285.90094 51.43890 C
@c
272.23909 25.58494 m
272.92791 25.29496 273.84888 25.29950 274.43735 25.66233 C
274.98869 26.00277 275.52472 25.69691 275.92894 26.12806 C
276.81250 27.07143 275.94567 29.82047 274.98699 30.24312 C
274.75172 30.24312 274.51587 30.24312 274.28031 30.24312 C
274.28031 30.24312 272.31761 25.74028 272.31761 25.74028 C
272.29153 25.68841 272.26517 25.63654 272.23909 25.58494 C
@c
263.60249 17.74318 m
263.65691 18.99468 264.29471 20.12542 264.54444 21.31512 C
264.70743 22.09181 264.27288 23.17351 264.30917 23.87679 C
266.24353 24.21184 268.87039 28.66252 270.51194 30.01039 C
271.17553 30.55550 272.28302 31.38208 273.10252 31.64060 C
273.44268 31.58872 273.78312 31.53713 274.12328 31.48554 C
275.35776 31.23298 276.44060 31.65307 277.10731 31.95128 C
277.13225 32.41729 277.14302 32.94907 276.94998 33.19370 C
276.88167 33.34847 276.49191 33.98400 276.40035 33.81449 C
275.74072 33.78813 275.22595 33.14268 274.67320 32.80535 C
274.28031 32.80535 273.88800 32.80535 273.49512 32.80535 C
271.20841 32.80535 269.69102 34.97584 270.19757 37.38614 C
272.25836 36.76450 275.71266 36.78038 277.42110 38.00721 C
277.81172 40.98444 278.12721 45.25540 279.22706 47.63452 C
279.63751 48.52346 278.68167 50.77474 279.30529 52.44803 C
279.72397 52.44803 280.14293 52.44803 280.56189 52.44803 C
280.79745 52.11184 281.03272 51.77509 281.26857 51.43890 C
281.47776 50.91307 282.54472 45.21118 282.36756 44.68422 C
282.04894 43.73887 280.91027 40.37102 281.34680 39.48236 C
281.39924 39.37890 281.45169 39.27515 281.50413 39.17169 C
283.11420 39.15666 284.96721 40.17402 285.50778 41.50091 C
285.91257 42.49332 285.01994 42.88195 285.19398 43.44208 C
285.32494 43.44208 285.45534 43.44208 285.58687 43.44208 C
286.47298 42.93694 289.87087 42.46611 291.16148 42.27732 C
291.16148 41.76000 291.16148 41.24211 291.16148 40.72479 C
290.97780 40.62132 290.79496 40.51757 290.61156 40.41411 C
290.53304 40.51757 290.45480 40.62132 290.37600 40.72479 C
288.16356 39.96850 283.19443 37.73339 282.68192 36.06633 C
282.13398 36.09071 281.42872 36.11650 281.11096 35.91099 C
279.50287 34.96989 280.75691 32.59134 280.16929 30.55380 C
279.99383 29.94661 279.71036 29.08630 279.85521 28.30224 C
280.14293 28.27644 280.43121 28.25036 280.71865 28.22457 C
281.77795 30.17367 284.64265 30.98948 286.76466 29.31137 C
288.52441 27.91956 287.16718 26.53427 287.86337 24.49814 C
288.27156 23.30476 289.56217 22.66214 290.06192 21.08183 C
290.08885 20.99707 290.27622 20.66202 290.37600 20.84910 C
291.72444 17.11956 286.35392 17.13118 284.33027 17.27717 C
284.08620 17.74375 283.50227 18.25087 283.30980 18.75260 C
282.47443 20.93159 282.52602 23.85468 280.48337 24.80825 C
277.13083 22.42063 280.99049 17.30126 279.38381 13.24006 C
279.35773 13.24006 279.33137 13.24006 279.30529 13.24006 C
278.91553 13.61169 278.21395 13.65024 277.81370 14.01676 C
276.81506 14.93093 276.09080 16.66460 275.61515 18.36454 C
275.13524 20.08006 276.65348 21.54132 276.16450 22.55698 C
275.97118 22.67405 275.90088 22.77128 275.77247 22.94504 C
274.39427 23.01420 272.23455 22.45323 271.76769 21.31512 C
271.48365 20.62148 271.70079 20.12854 271.37537 19.45134 C
270.79654 18.24775 268.64476 14.89323 267.52791 14.32715 C
266.58595 14.02951 265.54337 14.59502 264.93704 15.10356 C
265.35912 16.41005 264.34715 17.60769 263.60249 17.74318 C
@c
236.59285 40.72479 m
236.80772 40.55102 236.74252 40.54280 237.14220 40.49150 C
238.13745 40.92605 240.62343 41.43628 241.14671 42.35499 C
241.14671 42.69146 241.14671 43.02794 241.14671 43.36413 C
240.63307 44.45150 239.31524 45.44164 238.39880 46.15937 C
238.34636 46.15937 238.29392 46.15937 238.24148 46.15937 C
237.62183 45.00113 236.61893 42.34677 236.59285 40.72479 C
@c
223.79443 23.17805 m
224.05606 22.29846 224.31827 21.41802 224.57991 20.53843 C
225.81496 18.31975 230.06636 17.01184 232.98123 18.67493 C
233.37043 19.86945 229.84781 24.84397 228.81969 25.66233 C
229.81436 25.66233 230.80876 25.66233 231.80315 25.66233 C
232.48545 25.25726 236.71049 23.87027 236.98517 24.03241 C
237.82139 24.71414 237.99770 30.44268 237.29924 30.86447 C
236.99594 31.04249 236.67704 31.00649 236.27877 30.94186 C
235.85896 30.11754 235.09049 28.72913 234.31550 28.06951 C
234.18482 28.06951 234.05386 28.06951 233.92318 28.06951 C
233.28425 29.04265 232.65241 29.95172 232.11723 31.17515 C
231.59906 32.35946 232.38822 34.31424 231.96076 35.28992 C
228.74258 35.71739 228.80891 33.34620 227.48457 31.71855 C
225.60661 29.40888 223.76466 27.17717 223.79443 23.17805 C
@c
208.64098 21.93591 m
208.64098 22.45294 208.64098 22.97083 208.64098 23.48844 C
209.53928 23.96126 210.06312 24.97890 210.83981 25.58494 C
210.57959 26.27008 210.43644 27.02750 210.52517 27.91389 C
211.17005 27.92069 213.31984 27.44476 214.68671 27.91389 C
215.93339 28.34249 221.21405 30.12973 221.75320 31.01953 C
222.37965 32.05389 221.73449 35.03339 222.22431 36.06633 C
222.54690 36.74580 224.02460 38.80573 223.55915 39.71537 C
222.26570 41.32460 217.09729 38.02507 217.12025 42.12227 C
217.33483 42.16450 217.28381 42.17131 217.51342 42.35499 C
218.27112 42.36350 219.03222 42.21581 219.55465 41.96693 C
220.86085 42.52649 224.66126 43.87294 225.44334 45.14995 C
226.63020 47.08743 226.03408 49.43027 227.87745 50.97317 C
229.29817 51.11745 230.46718 50.82746 231.64611 50.27443 C
230.88019 47.83635 228.95631 46.73962 227.87745 44.52860 C
227.11691 42.97096 226.98850 39.94923 226.69994 38.47294 C
226.69994 37.95534 226.69994 37.43773 226.69994 36.92041 C
226.52050 36.92580 226.04003 34.98435 225.99326 34.59118 C
226.07178 34.51323 226.15002 34.43584 226.22882 34.35817 C
226.35950 34.38397 226.49046 34.41005 226.62113 34.43584 C
226.67357 34.43584 226.72602 34.43584 226.77789 34.43584 C
227.10586 34.69294 227.59965 35.16009 227.72069 35.60060 C
227.72069 35.88491 227.72069 36.16980 227.72069 36.45439 C
227.95030 36.84954 228.46309 37.20501 228.66265 37.61915 C
230.24154 37.57606 232.24677 38.00353 232.74510 38.86101 C
233.26894 39.96369 232.77940 42.24019 233.21650 43.13140 C
233.66976 44.05550 234.33335 46.22287 234.62986 47.24646 C
235.24186 49.35997 232.82135 51.25068 234.15874 52.29298 C
235.13471 53.36277 237.19890 51.87940 237.69184 51.36094 C
238.73641 50.26337 237.57874 49.00564 238.08472 47.55713 C
238.49887 46.37027 240.88479 45.44872 241.93191 44.91723 C
243.13578 44.76189 244.33965 44.60655 245.54381 44.45150 C
245.62205 44.34775 245.70085 44.24400 245.77909 44.14082 C
245.75329 43.85594 245.72693 43.57106 245.70085 43.28674 C
244.84082 41.75490 242.29389 40.78318 241.14671 39.94809 C
240.28781 39.32277 239.76312 38.06929 238.87020 37.54148 C
237.67880 36.83764 236.29011 37.11600 235.57209 35.98866 C
235.54602 35.72957 235.51965 35.47106 235.49357 35.21197 C
235.01367 35.29134 235.12961 34.40353 235.17950 34.12517 C
236.21669 33.68466 239.79543 33.04942 240.28271 32.26167 C
241.29808 30.62041 241.18044 27.10942 240.67559 24.80825 C
240.52337 24.11461 240.18293 23.41247 240.36123 22.40164 C
244.56728 21.06680 250.66517 17.65276 245.30825 13.24006 C
241.10561 13.22334 241.09313 15.61493 238.00592 16.73405 C
237.36302 16.96706 235.22145 15.97635 234.86542 15.80230 C
234.39402 15.77650 233.92318 15.75043 233.45178 15.72463 C
231.52280 15.09477 229.09776 14.64406 227.17077 15.10356 C
226.56047 16.42167 225.48699 17.77039 224.50139 18.67493 C
224.47502 18.67493 224.44894 18.67493 224.42287 18.67493 C
224.34435 18.59754 224.26583 18.51987 224.18731 18.44192 C
224.20517 16.54441 225.87052 14.10038 224.81518 12.30860 C
224.51386 12.45373 223.95118 12.34375 223.55915 12.54132 C
222.49020 13.07991 222.13871 14.26819 221.51764 15.25861 C
221.36060 15.77650 221.20384 16.29411 221.04652 16.81200 C
220.34013 17.43279 219.63317 18.05386 218.92677 18.67493 C
218.43836 19.25178 218.63735 20.59398 218.06277 21.08183 C
217.29317 21.73578 212.99187 18.86031 210.91833 19.76173 C
209.80176 20.24702 209.19883 21.14816 208.64098 21.93591 C
@c
184.53628 45.84869 m
184.77213 46.00403 185.00712 46.15937 185.24353 46.31414 C
185.21717 46.74472 185.18797 46.71496 185.00712 46.93550 C
184.98132 46.93550 184.95496 46.93550 184.92917 46.93550 C
184.87672 46.90998 184.82428 46.88391 184.77213 46.85811 C
184.64627 46.46976 184.73329 46.18630 184.53628 45.84869 C
@c
183.90841 45.46035 m
184.01301 45.38296 184.11761 45.30501 184.22249 45.22734 C
184.30129 45.27921 184.37953 45.33109 184.45805 45.38296 C
184.45805 45.40847 184.45805 45.43455 184.45805 45.46035 C
184.45805 45.56381 184.45805 45.66728 184.45805 45.77102 C
184.37953 45.79710 184.30129 45.82290 184.22249 45.84869 C
184.17005 45.82290 184.11761 45.79710 184.06517 45.77102 C
184.01301 45.66728 183.96085 45.56381 183.90841 45.46035 C
@c
167.65569 45.14967 m
167.63953 46.77392 167.68573 48.18302 168.28384 49.42006 C
168.23140 49.98926 168.17896 50.55902 168.12652 51.12794 C
168.61861 51.18463 170.32507 51.59395 170.32507 51.59395 C
171.46942 49.60375 171.31465 47.24306 172.91622 45.61540 C
172.91622 44.83956 172.91622 44.06287 172.91622 43.28646 C
172.50803 43.11213 172.08794 42.49361 171.73843 42.19965 C
169.18838 42.15515 168.35839 43.61074 167.65569 45.14967 C
@c
163.65118 27.60321 m
163.65118 28.66450 163.65118 29.72580 163.65118 30.78680 C
165.52460 31.07083 166.46428 32.73279 167.34189 34.04750 C
168.45704 35.71767 171.48161 37.85556 173.54438 39.09373 C
174.15326 39.45912 178.09257 41.43288 177.78416 41.57830 C
178.55320 41.95559 181.82296 43.38057 181.94542 44.21820 C
181.91934 44.26980 181.89326 44.32167 181.86718 44.37354 C
181.37169 44.50819 178.72328 45.53972 178.33408 45.84869 C
177.92022 46.17609 177.57978 46.93805 177.23424 47.09083 C
177.23424 47.22038 177.23424 47.34964 177.23424 47.47918 C
179.41465 46.86009 184.06942 47.76321 185.16472 48.56598 C
185.80280 49.03398 186.61209 49.69191 187.52003 49.96318 C
188.62243 50.29313 192.50816 48.20145 193.09465 47.71191 C
193.06885 47.32384 193.04249 46.93521 193.01641 46.54743 C
192.52602 46.32775 191.89077 45.78151 191.44602 45.46035 C
191.23654 45.46035 191.02706 45.46035 190.81786 45.46035 C
189.53745 45.05244 185.62422 44.03452 184.69332 43.05373 C
184.74576 42.82101 184.79820 42.58772 184.85036 42.35499 C
185.32176 42.12170 185.79260 41.88898 186.26400 41.65625 C
186.70876 41.63017 187.15351 41.60438 187.59855 41.57830 C
189.30444 40.67943 194.43883 34.00186 190.81786 31.32992 C
190.45786 31.06431 187.43528 30.08466 187.75587 29.93272 C
186.27534 29.37231 184.67263 30.53027 183.98665 29.23370 C
183.96085 28.48309 183.93449 27.73276 183.90841 26.98243 C
183.34261 25.87550 181.88702 24.54718 181.00346 23.64378 C
180.96633 23.12391 180.93458 22.93625 181.31726 22.78970 C
181.51597 22.36932 182.24674 22.26189 182.80942 22.24658 C
183.15638 22.66980 183.33609 22.81805 183.51609 23.48844 C
186.27959 23.51254 187.60309 22.49490 189.87562 22.01329 C
190.13159 21.45912 190.90913 19.87342 190.73962 19.45134 C
190.41024 19.06894 190.10098 18.53433 189.64006 18.28658 C
187.35364 17.67685 186.41594 19.98680 184.61537 19.68406 C
184.42857 19.91395 183.29924 18.83792 183.20173 18.51959 C
183.04498 18.00737 183.41745 17.46227 183.51609 17.19978 C
183.51609 16.68217 183.51609 16.16457 183.51609 15.64696 C
183.85370 13.65392 183.00728 12.14135 181.55339 11.45424 C
179.74630 10.60072 174.96652 11.95172 173.85846 12.54104 C
173.88170 12.82394 171.80759 13.93427 171.26731 14.01647 C
171.29339 14.06835 171.31975 14.11994 171.34583 14.17153 C
173.58746 14.61883 177.57524 15.10129 179.19751 16.26803 C
179.55524 16.52513 181.52816 17.72220 180.61087 18.28658 C
179.67912 18.66699 177.15572 18.36510 176.37109 17.97591 C
175.45266 17.52009 171.52554 18.60350 171.34583 18.75260 C
170.94331 19.08595 170.73581 19.39946 170.56120 19.83940 C
170.67402 20.06419 170.68535 20.07354 170.71795 20.22775 C
173.24447 20.21074 176.90088 20.63650 179.27631 21.08183 C
179.43335 21.28876 179.59011 21.49569 179.74743 21.70261 C
179.74743 21.80608 179.74743 21.90983 179.74743 22.01329 C
179.34378 22.32709 179.23011 22.51389 178.64787 22.71175 C
178.63682 23.75206 178.55376 24.85984 179.04047 25.66233 C
179.52321 26.45858 180.97228 28.29883 180.76762 29.31137 C
180.65169 29.56706 180.53887 29.71899 180.29650 29.85477 C
178.15238 30.70176 175.79424 26.33981 174.56513 27.60321 C
174.68277 28.95732 174.92031 30.58441 175.74293 31.48554 C
177.09024 32.96211 180.65310 32.89578 181.94542 31.48554 C
183.42907 31.44954 184.04277 32.08054 184.92917 32.57206 C
186.01285 33.17329 187.51635 33.58261 188.14819 34.59090 C
188.21991 34.70513 188.21055 35.04501 188.38375 34.82391 C
189.88951 37.48677 185.90060 40.00422 184.45805 40.41354 C
181.80652 41.16728 178.60139 38.03896 177.70564 36.84246 C
175.88806 34.41458 172.49839 32.74243 170.48239 30.24283 C
169.63087 29.18750 169.82334 27.71235 169.30460 26.28369 C
169.00894 25.46986 168.45137 24.52110 168.04828 23.79912 C
166.41496 23.57631 164.68072 24.57524 164.04406 25.73972 C
163.67698 26.41096 164.10274 27.10687 163.65118 27.60321 C
@c
142.68756 33.42614 m
142.93304 33.44769 143.28992 33.58743 143.47304 33.89216 C
143.63235 34.25669 143.47616 34.40409 143.23663 34.59090 C
143.15868 34.53902 143.07987 34.48772 143.00164 34.43584 C
142.89704 34.09909 142.79216 33.76290 142.68756 33.42614 C
@c
134.20800 37.30847 m
134.49515 36.95669 134.67883 36.84189 135.15024 37.07518 C
135.19134 37.67272 135.34894 37.59392 135.46375 38.08460 C
135.38551 38.18806 135.30728 38.29181 135.22876 38.39499 C
134.99291 38.29181 134.75735 38.18806 134.52180 38.08460 C
134.39055 37.69852 134.28454 37.79093 134.20800 37.30847 C
@c
131.22397 28.37962 m
132.48964 27.78151 134.48551 29.28472 135.15024 29.93272 C
135.07143 30.26891 134.99291 30.60539 134.91468 30.94186 C
134.75735 31.07112 134.60031 31.20094 134.44328 31.32992 C
133.61528 30.77802 131.79373 29.61241 131.22397 28.84535 C
131.22397 28.69030 131.22397 28.53496 131.22397 28.37962 C
@c
123.52961 37.38586 m
123.73569 37.28636 123.80400 37.25291 124.15776 37.23052 C
125.09320 37.62283 125.34435 38.19288 125.96372 38.86101 C
125.93764 39.11981 125.91128 39.37890 125.88520 39.63742 C
125.57140 39.61162 125.25704 39.58554 124.94296 39.55975 C
124.26406 39.16772 123.59480 38.35928 123.52961 37.38586 C
@c
121.72365 30.55351 m
122.04624 30.44211 121.97679 30.41518 122.27329 30.55351 C
122.69962 31.21257 126.73247 34.48488 125.72816 35.28992 C
122.82378 36.51477 121.64003 33.03609 121.72365 30.55351 C
@c
118.03351 33.81449 m
118.21691 33.65915 118.40003 33.50409 118.58315 33.34847 C
118.92331 33.34847 119.26346 33.34847 119.60419 33.34847 C
119.84173 33.55285 119.92110 33.66198 119.99650 34.04750 C
119.78731 34.17704 119.57783 34.30602 119.36806 34.43584 C
119.34510 34.29553 118.19906 34.14614 118.03351 34.04750 C
118.03351 33.96983 118.03351 33.89216 118.03351 33.81449 C
@c
114.65717 24.49786 m
115.76466 24.76290 120.59433 27.72482 118.26935 29.07865 C
118.08567 29.07865 117.90283 29.07865 117.71915 29.07865 C
117.20041 27.19843 115.27739 26.40189 114.65717 24.49786 C
@c
107.98356 19.68406 m
108.00964 21.10734 108.03600 22.53118 108.06180 23.95446 C
109.13499 24.22942 114.71528 31.54791 115.59969 32.88302 C
115.40551 32.99783 115.33521 33.02334 114.97124 33.03808 C
114.45137 32.69991 109.54063 31.05553 108.61200 31.87361 C
108.53320 31.92520 108.45439 31.97707 108.37587 32.02866 C
108.35093 35.43420 111.08013 37.03465 113.00854 38.39499 C
114.42841 39.39647 115.27965 40.59865 116.46340 41.96693 C
117.66501 43.35591 120.81373 45.53121 121.56661 47.40151 C
121.91017 48.25446 121.96885 49.54025 121.95950 50.66249 C
123.84425 51.22828 125.29757 50.81641 126.51364 49.88608 C
125.27008 45.29310 117.54198 40.01244 114.02929 36.76479 C
113.18740 35.98668 112.22759 35.58728 111.51666 34.66857 C
111.56882 34.59090 111.62126 34.51323 111.67370 34.43584 C
112.93569 34.40551 114.74646 35.02006 115.75644 35.44498 C
117.14372 35.60003 118.53099 35.75537 119.91798 35.91071 C
121.06290 36.59159 120.87383 37.54743 121.56661 38.70595 C
122.49014 40.24998 123.18463 41.95304 124.78592 43.05373 C
125.49231 43.05373 126.19928 43.05373 126.90595 43.05373 C
127.15058 42.60728 127.63531 42.41424 127.92671 42.04431 C
128.61383 41.17181 129.02428 40.03569 129.65386 39.17169 C
130.40646 39.69213 132.15146 41.37392 131.45981 42.66539 C
131.10094 43.33521 130.26132 43.79131 130.75342 44.68422 C
130.85150 45.47339 132.82328 46.35128 133.73660 46.31414 C
133.84346 45.34668 134.74460 44.21792 135.46375 43.83014 C
137.10331 43.13735 136.63672 45.17660 136.95591 46.23676 C
137.62687 48.46904 136.26000 53.56375 139.31150 53.53512 C
139.48554 53.17455 140.89238 52.16060 141.27420 51.74901 C
141.32665 51.74901 141.37909 51.74901 141.43124 51.74901 C
141.92050 50.71691 142.30630 50.20441 142.92340 49.34239 C
143.55893 48.45402 144.24718 46.41392 144.49351 45.22734 C
144.71631 44.15329 143.54816 43.55036 144.02211 42.35499 C
144.65792 40.75257 146.52567 39.80013 147.32022 38.31789 C
147.78567 37.44879 147.59575 36.34809 148.18365 35.83332 C
149.32743 34.83156 150.66709 34.46476 151.71676 33.27080 C
151.71676 32.98620 151.71676 32.70161 151.71676 32.41701 C
151.20680 32.19647 150.66397 31.68624 150.14608 31.40759 C
149.44961 31.03257 148.41468 31.12554 147.94809 31.01953 C
146.17474 30.61502 143.95578 30.00246 143.00164 28.76825 C
142.30687 27.86910 142.33635 23.59899 141.90236 22.16863 C
141.87600 21.57364 141.85020 20.97836 141.82441 20.38280 C
141.27165 19.39380 140.99839 17.78598 140.72485 16.73405 C
140.72485 16.42337 140.72485 16.11269 140.72485 15.80230 C
139.76249 13.95128 139.23553 12.13285 138.29102 10.52249 C
138.23830 9.84983 138.18586 9.17688 138.13370 8.50394 C
138.05546 8.53002 137.97694 8.55581 137.89814 8.58189 C
137.61496 9.17688 136.89071 9.53263 136.56331 10.05676 C
136.00290 10.95420 135.83906 12.01068 135.46375 12.92967 C
135.46375 13.47279 135.46375 14.01647 135.46375 14.55987 C
134.96712 16.54980 135.42945 20.62460 135.07143 23.41077 C
134.86706 23.47795 134.79732 23.37959 134.91468 23.56639 C
132.49871 23.04454 130.46570 22.52608 128.39811 21.62523 C
127.27219 21.59915 126.14683 21.57335 125.02148 21.54756 C
123.80003 22.59326 124.01546 25.89477 124.55036 27.52554 C
125.61364 27.89858 127.32718 29.23569 127.76939 30.24283 C
127.79575 30.52800 127.82183 30.81260 127.84819 31.09720 C
129.16120 32.97827 131.24069 34.51436 130.20350 37.69625 C
130.15106 37.72205 130.09890 37.74813 130.04646 37.77392 C
126.52611 35.35739 127.19083 33.05140 124.94296 29.93272 C
123.41707 27.81524 122.22482 27.82658 121.09550 24.80825 C
120.09175 22.12498 122.43487 18.19531 122.43061 16.11298 C
122.06721 15.96076 121.91584 15.65461 121.64542 15.41424 C
121.38378 15.41424 121.12186 15.41424 120.85994 15.41424 C
120.10535 16.57644 119.37231 17.52236 118.66167 18.90794 C
118.17865 19.84876 118.48762 21.06085 118.03351 21.93591 C
117.85039 21.90983 117.66699 21.88403 117.48387 21.85795 C
115.94721 19.47345 112.73868 17.96797 108.69024 17.97591 C
108.54397 18.30614 108.19417 18.34413 108.06180 18.59754 C
108.03600 18.95953 108.00964 19.32151 107.98356 19.68406 C
@c
77.83342 30.94186 m
78.25550 30.52431 78.39808 29.68016 78.77565 29.23370 C
78.88025 29.25950 78.98513 29.28529 79.08945 29.31137 C
79.21644 29.94690 80.07165 31.54195 79.32529 32.10633 C
79.24677 32.21008 79.16825 32.31354 79.08945 32.41701 C
78.65546 32.42778 78.39241 32.38129 78.14721 32.26167 C
78.08655 31.60460 77.87367 31.66894 77.83342 30.94186 C
@c
72.65112 32.80535 m
72.67720 32.65002 72.70356 32.49468 72.72964 32.33934 C
72.78236 32.33934 72.83480 32.33934 72.88696 32.33934 C
72.96548 32.31354 73.04372 32.28746 73.12252 32.26167 C
73.27956 32.44280 73.43660 32.62394 73.59335 32.80535 C
73.61150 33.21383 73.66706 33.34649 73.51483 33.65915 C
73.46268 33.73682 73.41024 33.81449 73.35808 33.89216 C
73.27956 33.84028 73.20076 33.78869 73.12252 33.73682 C
72.96548 33.42614 72.80872 33.11603 72.65112 32.80535 C
@c
67.31263 31.01953 m
67.46910 30.94186 67.62614 30.86391 67.78346 30.78680 C
68.60523 31.02520 68.98847 31.59836 69.58942 32.02866 C
69.58942 32.26167 69.58942 32.49468 69.58942 32.72740 C
69.53698 32.72740 69.48454 32.72740 69.43209 32.72740 C
69.30113 32.75348 69.17046 32.77928 69.03978 32.80535 C
68.48872 32.11937 67.82003 31.83137 67.31263 31.01953 C
@c
62.44413 19.29600 m
62.67458 19.08057 64.67839 17.80838 64.87824 17.74318 C
65.94888 17.39367 71.74998 18.38580 72.10205 18.75260 C
71.86167 19.06753 71.74006 19.35638 71.63065 19.83940 C
71.68280 19.83940 71.73524 19.83940 71.78769 19.83940 C
73.15512 20.43043 74.92592 16.71279 76.96998 20.46047 C
78.33373 20.03159 80.72844 17.99802 82.38756 18.83027 C
85.68652 20.48457 86.39150 25.60819 86.39150 31.09720 C
86.39150 32.88586 86.69225 35.46567 86.07742 36.76479 C
86.07742 37.46353 86.07742 38.16255 86.07742 38.86101 C
86.07572 40.20265 85.92350 43.05118 85.37074 44.14054 C
85.34466 44.86507 85.31830 45.58989 85.29222 46.31414 C
84.83017 48.17140 84.45146 50.10520 83.80063 51.59395 C
75.85228 52.70287 70.61669 50.23814 67.15531 45.46035 C
66.52091 44.58529 63.87789 41.27159 64.79943 39.48236 C
66.74854 39.55436 69.32466 42.57978 70.76693 43.44180 C
70.84517 43.48857 72.10205 43.75247 72.10205 43.75247 C
78.57638 44.38120 74.58803 39.20173 74.53587 36.37644 C
75.41887 35.75877 77.99272 33.42926 79.40381 34.20283 C
79.56057 34.38397 79.71817 34.56510 79.87493 34.74595 C
81.77953 34.71250 86.14035 31.58674 83.95767 29.23370 C
83.21443 28.43263 81.81326 27.99099 80.89540 27.37049 C
79.64957 26.52775 78.40261 25.14699 77.12674 24.18718 C
77.04142 24.12312 76.43565 23.96551 76.73386 23.79912 C
75.41717 23.08195 73.62340 22.52409 72.18000 21.62523 C
71.23465 21.03591 69.32381 21.73720 68.56866 21.54756 C
68.11030 22.39512 66.63288 23.99726 67.46910 25.66233 C
67.84554 26.35115 68.95843 27.22252 69.58942 27.68117 C
69.56249 28.30961 69.43691 28.37764 68.88274 28.30224 C
67.95213 27.23329 65.37997 29.81424 65.19260 30.32079 C
65.19260 31.04532 65.19260 31.77014 65.19260 32.49468 C
65.93301 32.92413 66.35310 33.49871 67.15531 33.96983 C
69.01200 35.05946 72.59159 35.42457 71.63065 38.70595 C
71.47389 38.73203 71.31657 38.75754 71.15953 38.78362 C
69.97521 37.66535 65.40633 38.02195 64.40712 36.45411 C
63.74324 35.90957 64.42894 33.99647 63.85776 33.03808 C
63.27666 33.08712 63.52866 31.67235 63.15109 31.01953 C
61.95118 28.94570 63.33987 24.50806 62.83701 22.16863 C
62.62583 21.18416 62.48098 19.96696 62.44413 19.29600 C
@c
57.73351 18.59754 m
57.74598 21.99628 58.99550 25.28079 59.69622 28.22428 C
59.69622 28.92302 59.69622 29.62205 59.69622 30.32079 C
59.69622 33.90265 58.08983 37.31754 58.59723 40.49150 C
59.64860 47.07156 65.65323 50.62904 71.47389 52.44775 C
73.68831 53.13997 80.61137 55.30082 83.48655 53.61250 C
83.88624 53.37808 84.92400 53.50932 85.44926 53.14677 C
90.80362 49.44926 89.46057 37.35071 89.53228 28.92302 C
89.56715 24.81902 90.37191 18.77811 88.35477 16.34570 C
87.82894 15.71159 81.82743 11.62205 80.11020 12.54104 C
78.18236 13.57313 76.90450 16.05118 74.45707 16.19008 C
73.55197 16.24167 72.55984 15.44627 71.94501 15.10356 C
71.48438 14.84674 65.78334 14.04709 64.79943 14.32687 C
63.62107 14.66277 63.21600 15.49020 62.44413 16.19008 C
62.36561 16.19008 62.28737 16.19008 62.20857 16.19008 C
61.51918 15.57694 61.09852 14.69962 59.69622 14.71550 C
59.44280 15.23877 58.85433 15.68863 58.59723 16.19008 C
58.17061 17.02091 58.16013 17.77181 57.73351 18.59754 C
@c
29.07468 37.07518 m
29.36891 36.29509 29.38280 35.72617 29.70340 35.13458 C
31.28882 36.00312 37.22882 39.78624 37.39748 41.42324 C
37.34504 41.42324 37.29260 41.42324 37.24101 41.42324 C
36.24321 41.84391 34.59458 41.39717 33.78614 41.11285 C
33.13191 41.11285 32.47767 41.11285 31.82258 41.11285 C
29.51206 40.60460 29.03386 39.51723 29.07468 37.07518 C
@c
16.27682 32.80535 m
17.32876 31.80926 17.46709 31.02236 17.45490 29.07865 C
17.85572 28.90460 17.73099 28.89666 17.92573 28.61263 C
18.59443 28.55679 19.23534 28.55339 19.80992 28.69030 C
19.97518 29.17361 20.73317 30.00359 20.90948 30.55351 C
21.35112 31.93257 21.53197 35.43676 20.59540 36.22139 C
20.54296 36.29934 20.49052 36.37644 20.43808 36.45411 C
18.86088 36.45014 16.76693 34.68274 16.35534 33.50409 C
16.32926 33.27080 16.30290 33.03808 16.27682 32.80535 C
@c
9.21061 40.49150 m
10.59052 40.41553 11.28529 39.48775 11.95852 38.70595 C
12.40356 38.70595 12.84831 38.70595 13.29335 38.70595 C
13.89487 39.19748 14.49723 39.68929 15.09902 40.18082 C
16.31650 40.87587 18.14598 41.13156 19.41732 41.96693 C
20.38762 42.60416 21.27288 42.02504 21.93024 43.20879 C
22.72224 45.07342 21.33383 46.86973 22.00847 49.18734 C
22.34693 50.35068 22.60148 51.12170 22.79395 52.44775 C
22.81493 52.59402 22.58844 55.42214 22.95071 55.16504 C
23.00315 55.24299 23.05531 55.32066 23.10775 55.39833 C
25.68586 55.47146 29.24249 51.56050 31.35203 50.27414 C
31.48753 48.09969 30.66038 46.22088 31.03795 44.29587 C
33.58403 43.08265 37.14690 44.50620 39.91011 44.99461 C
40.93058 44.94274 41.95134 44.89115 42.97266 44.83956 C
43.45228 44.59096 43.94976 43.83609 44.46425 43.83014 C
44.46425 43.59685 44.46425 43.36413 44.46425 43.13083 C
43.28476 42.30170 42.50580 41.05219 41.55902 40.02576 C
40.71543 39.11074 38.37685 37.98680 37.00488 37.15313 C
35.99093 36.53631 34.46844 36.12472 34.41402 34.59090 C
34.59713 34.43584 34.78082 34.28050 34.96337 34.12517 C
36.89717 33.24331 39.65357 34.25443 40.53827 32.26167 C
40.71515 31.86397 41.06976 31.47846 40.61679 31.01953 C
39.44778 29.18381 36.28857 30.59717 34.57106 29.46699 C
33.12595 28.51540 31.74548 27.25512 30.56683 26.28369 C
29.48854 25.39446 28.09616 25.95855 27.34753 24.73058 C
26.48693 23.31921 27.26731 20.67647 26.95550 19.06328 C
26.82425 18.70072 26.69329 18.33846 26.56261 17.97591 C
24.30000 17.63036 24.83235 13.02917 23.18627 11.53219 C
22.67688 14.40709 20.95767 16.90753 20.43808 19.37339 C
20.20989 20.45707 20.85335 21.85427 19.96696 22.55669 C
19.47798 22.79310 18.47991 22.65222 17.92573 22.71175 C
17.18787 24.27931 16.69890 26.39112 14.94227 26.98243 C
14.19109 27.23528 13.84526 26.68620 12.66520 26.67175 C
12.45203 27.14967 12.21080 28.17723 11.80148 28.76825 C
11.30740 29.48088 10.14548 29.74167 9.60321 30.39846 C
9.60321 30.47613 9.60321 30.55351 9.60321 30.63146 C
9.13606 31.69616 9.59357 32.51339 9.36737 33.27080 C
9.24406 33.68409 8.60428 34.06819 8.50394 34.66857 C
9.45893 35.75849 9.22932 37.95959 9.21061 40.49150 C
@c
F

@rax %Note: Object
0.00000 0.00000 394.01575 65.19685 @E
/$fm 0 def
0.00000 65.19685 m
394.01575 65.19685 L
394.01575 0.00000 L
0.00000 0.00000 L
0.00000 65.19685 L
@c
N

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel16Dict 16.0 0
%%EOF
